// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StartPosition determines the start-position type on a subscription.
type StartPosition int32

const (
	StartPosition_NEW_ONLY  StartPosition = 0
	StartPosition_OFFSET    StartPosition = 1
	StartPosition_EARLIEST  StartPosition = 2
	StartPosition_LATEST    StartPosition = 3
	StartPosition_TIMESTAMP StartPosition = 4
)

var StartPosition_name = map[int32]string{
	0: "NEW_ONLY",
	1: "OFFSET",
	2: "EARLIEST",
	3: "LATEST",
	4: "TIMESTAMP",
}

var StartPosition_value = map[string]int32{
	"NEW_ONLY":  0,
	"OFFSET":    1,
	"EARLIEST":  2,
	"LATEST":    3,
	"TIMESTAMP": 4,
}

func (x StartPosition) String() string {
	return proto.EnumName(StartPosition_name, int32(x))
}

func (StartPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// StopPosition determines the stop-position type on a subscription.
type StopPosition int32

const (
	StopPosition_STOP_ON_CANCEL StopPosition = 0
	StopPosition_STOP_OFFSET    StopPosition = 1
	StopPosition_STOP_LATEST    StopPosition = 2
	StopPosition_STOP_TIMESTAMP StopPosition = 3
)

var StopPosition_name = map[int32]string{
	0: "STOP_ON_CANCEL",
	1: "STOP_OFFSET",
	2: "STOP_LATEST",
	3: "STOP_TIMESTAMP",
}

var StopPosition_value = map[string]int32{
	"STOP_ON_CANCEL": 0,
	"STOP_OFFSET":    1,
	"STOP_LATEST":    2,
	"STOP_TIMESTAMP": 3,
}

func (x StopPosition) String() string {
	return proto.EnumName(StopPosition_name, int32(x))
}

func (StopPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

// AckPolicy controls the behavior of message acknowledgements.
type AckPolicy int32

const (
	AckPolicy_LEADER AckPolicy = 0
	AckPolicy_ALL    AckPolicy = 1
	AckPolicy_NONE   AckPolicy = 2
)

var AckPolicy_name = map[int32]string{
	0: "LEADER",
	1: "ALL",
	2: "NONE",
}

var AckPolicy_value = map[string]int32{
	"LEADER": 0,
	"ALL":    1,
	"NONE":   2,
}

func (x AckPolicy) String() string {
	return proto.EnumName(AckPolicy_name, int32(x))
}

func (AckPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

// ActivityStreamOp represents an activity stream operation.
type ActivityStreamOp int32

const (
	ActivityStreamOp_CREATE_STREAM       ActivityStreamOp = 0
	ActivityStreamOp_DELETE_STREAM       ActivityStreamOp = 1
	ActivityStreamOp_PAUSE_STREAM        ActivityStreamOp = 2
	ActivityStreamOp_RESUME_STREAM       ActivityStreamOp = 3
	ActivityStreamOp_SET_STREAM_READONLY ActivityStreamOp = 4
)

var ActivityStreamOp_name = map[int32]string{
	0: "CREATE_STREAM",
	1: "DELETE_STREAM",
	2: "PAUSE_STREAM",
	3: "RESUME_STREAM",
	4: "SET_STREAM_READONLY",
}

var ActivityStreamOp_value = map[string]int32{
	"CREATE_STREAM":       0,
	"DELETE_STREAM":       1,
	"PAUSE_STREAM":        2,
	"RESUME_STREAM":       3,
	"SET_STREAM_READONLY": 4,
}

func (x ActivityStreamOp) String() string {
	return proto.EnumName(ActivityStreamOp_name, int32(x))
}

func (ActivityStreamOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

type PublishAsyncError_Code int32

const (
	PublishAsyncError_UNKNOWN           PublishAsyncError_Code = 0
	PublishAsyncError_BAD_REQUEST       PublishAsyncError_Code = 1
	PublishAsyncError_NOT_FOUND         PublishAsyncError_Code = 2
	PublishAsyncError_INTERNAL          PublishAsyncError_Code = 3
	PublishAsyncError_READONLY          PublishAsyncError_Code = 4
	PublishAsyncError_INCORRECT_OFFSET  PublishAsyncError_Code = 5
	PublishAsyncError_ENCRYPTION_FAILED PublishAsyncError_Code = 6
)

var PublishAsyncError_Code_name = map[int32]string{
	0: "UNKNOWN",
	1: "BAD_REQUEST",
	2: "NOT_FOUND",
	3: "INTERNAL",
	4: "READONLY",
	5: "INCORRECT_OFFSET",
	6: "ENCRYPTION_FAILED",
}

var PublishAsyncError_Code_value = map[string]int32{
	"UNKNOWN":           0,
	"BAD_REQUEST":       1,
	"NOT_FOUND":         2,
	"INTERNAL":          3,
	"READONLY":          4,
	"INCORRECT_OFFSET":  5,
	"ENCRYPTION_FAILED": 6,
}

func (x PublishAsyncError_Code) String() string {
	return proto.EnumName(PublishAsyncError_Code_name, int32(x))
}

func (PublishAsyncError_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18, 0}
}

type StreamMetadata_Error int32

const (
	StreamMetadata_OK             StreamMetadata_Error = 0
	StreamMetadata_UNKNOWN_STREAM StreamMetadata_Error = 1
)

var StreamMetadata_Error_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN_STREAM",
}

var StreamMetadata_Error_value = map[string]int32{
	"OK":             0,
	"UNKNOWN_STREAM": 1,
}

func (x StreamMetadata_Error) String() string {
	return proto.EnumName(StreamMetadata_Error_name, int32(x))
}

func (StreamMetadata_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32, 0}
}

type ConsumerGroupMetadata_Error int32

const (
	ConsumerGroupMetadata_OK            ConsumerGroupMetadata_Error = 0
	ConsumerGroupMetadata_UNKNOWN_GROUP ConsumerGroupMetadata_Error = 1
)

var ConsumerGroupMetadata_Error_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN_GROUP",
}

var ConsumerGroupMetadata_Error_value = map[string]int32{
	"OK":            0,
	"UNKNOWN_GROUP": 1,
}

func (x ConsumerGroupMetadata_Error) String() string {
	return proto.EnumName(ConsumerGroupMetadata_Error_name, int32(x))
}

func (ConsumerGroupMetadata_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33, 0}
}

// Error represents an error that is piggybacked to AckInbox due to any
// error that is encountered upon publishing, e.g. a PublishRequest may
// include the expected offset which is outdated on the partition. This
// publish would be refused.
type Ack_Error int32

const (
	Ack_OK               Ack_Error = 0
	Ack_UNKNOWN          Ack_Error = 1
	Ack_INCORRECT_OFFSET Ack_Error = 2
	Ack_TOO_LARGE        Ack_Error = 3
	Ack_ENCRYPTION       Ack_Error = 4
)

var Ack_Error_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN",
	2: "INCORRECT_OFFSET",
	3: "TOO_LARGE",
	4: "ENCRYPTION",
}

var Ack_Error_value = map[string]int32{
	"OK":               0,
	"UNKNOWN":          1,
	"INCORRECT_OFFSET": 2,
	"TOO_LARGE":        3,
	"ENCRYPTION":       4,
}

func (x Ack_Error) String() string {
	return proto.EnumName(Ack_Error_name, int32(x))
}

func (Ack_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37, 0}
}

type NullableInt64 struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullableInt64) Reset()         { *m = NullableInt64{} }
func (m *NullableInt64) String() string { return proto.CompactTextString(m) }
func (*NullableInt64) ProtoMessage()    {}
func (*NullableInt64) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *NullableInt64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullableInt64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullableInt64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullableInt64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullableInt64.Merge(m, src)
}
func (m *NullableInt64) XXX_Size() int {
	return m.Size()
}
func (m *NullableInt64) XXX_DiscardUnknown() {
	xxx_messageInfo_NullableInt64.DiscardUnknown(m)
}

var xxx_messageInfo_NullableInt64 proto.InternalMessageInfo

func (m *NullableInt64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type NullableInt32 struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullableInt32) Reset()         { *m = NullableInt32{} }
func (m *NullableInt32) String() string { return proto.CompactTextString(m) }
func (*NullableInt32) ProtoMessage()    {}
func (*NullableInt32) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *NullableInt32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullableInt32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullableInt32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullableInt32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullableInt32.Merge(m, src)
}
func (m *NullableInt32) XXX_Size() int {
	return m.Size()
}
func (m *NullableInt32) XXX_DiscardUnknown() {
	xxx_messageInfo_NullableInt32.DiscardUnknown(m)
}

var xxx_messageInfo_NullableInt32 proto.InternalMessageInfo

func (m *NullableInt32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type NullableBool struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullableBool) Reset()         { *m = NullableBool{} }
func (m *NullableBool) String() string { return proto.CompactTextString(m) }
func (*NullableBool) ProtoMessage()    {}
func (*NullableBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *NullableBool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullableBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullableBool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullableBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullableBool.Merge(m, src)
}
func (m *NullableBool) XXX_Size() int {
	return m.Size()
}
func (m *NullableBool) XXX_DiscardUnknown() {
	xxx_messageInfo_NullableBool.DiscardUnknown(m)
}

var xxx_messageInfo_NullableBool proto.InternalMessageInfo

func (m *NullableBool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// CreateStreamRequest is sent to create a new stream.
type CreateStreamRequest struct {
	Subject                       string         `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Name                          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group                         string         `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	ReplicationFactor             int32          `protobuf:"varint,4,opt,name=replicationFactor,proto3" json:"replicationFactor,omitempty"`
	Partitions                    int32          `protobuf:"varint,5,opt,name=partitions,proto3" json:"partitions,omitempty"`
	RetentionMaxBytes             *NullableInt64 `protobuf:"bytes,6,opt,name=retentionMaxBytes,proto3" json:"retentionMaxBytes,omitempty"`
	RetentionMaxMessages          *NullableInt64 `protobuf:"bytes,7,opt,name=retentionMaxMessages,proto3" json:"retentionMaxMessages,omitempty"`
	RetentionMaxAge               *NullableInt64 `protobuf:"bytes,8,opt,name=retentionMaxAge,proto3" json:"retentionMaxAge,omitempty"`
	CleanerInterval               *NullableInt64 `protobuf:"bytes,9,opt,name=cleanerInterval,proto3" json:"cleanerInterval,omitempty"`
	SegmentMaxBytes               *NullableInt64 `protobuf:"bytes,10,opt,name=segmentMaxBytes,proto3" json:"segmentMaxBytes,omitempty"`
	SegmentMaxAge                 *NullableInt64 `protobuf:"bytes,11,opt,name=segmentMaxAge,proto3" json:"segmentMaxAge,omitempty"`
	CompactMaxGoroutines          *NullableInt32 `protobuf:"bytes,12,opt,name=compactMaxGoroutines,proto3" json:"compactMaxGoroutines,omitempty"`
	CompactEnabled                *NullableBool  `protobuf:"bytes,13,opt,name=compactEnabled,proto3" json:"compactEnabled,omitempty"`
	AutoPauseTime                 *NullableInt64 `protobuf:"bytes,14,opt,name=autoPauseTime,proto3" json:"autoPauseTime,omitempty"`
	AutoPauseDisableIfSubscribers *NullableBool  `protobuf:"bytes,15,opt,name=autoPauseDisableIfSubscribers,proto3" json:"autoPauseDisableIfSubscribers,omitempty"`
	MinIsr                        *NullableInt32 `protobuf:"bytes,16,opt,name=minIsr,proto3" json:"minIsr,omitempty"`
	OptimisticConcurrencyControl  *NullableBool  `protobuf:"bytes,17,opt,name=optimisticConcurrencyControl,proto3" json:"optimisticConcurrencyControl,omitempty"`
	Encryption                    *NullableBool  `protobuf:"bytes,18,opt,name=encryption,proto3" json:"encryption,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}       `json:"-"`
	XXX_unrecognized              []byte         `json:"-"`
	XXX_sizecache                 int32          `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CreateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStreamRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CreateStreamRequest) GetReplicationFactor() int32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *CreateStreamRequest) GetPartitions() int32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *CreateStreamRequest) GetRetentionMaxBytes() *NullableInt64 {
	if m != nil {
		return m.RetentionMaxBytes
	}
	return nil
}

func (m *CreateStreamRequest) GetRetentionMaxMessages() *NullableInt64 {
	if m != nil {
		return m.RetentionMaxMessages
	}
	return nil
}

func (m *CreateStreamRequest) GetRetentionMaxAge() *NullableInt64 {
	if m != nil {
		return m.RetentionMaxAge
	}
	return nil
}

func (m *CreateStreamRequest) GetCleanerInterval() *NullableInt64 {
	if m != nil {
		return m.CleanerInterval
	}
	return nil
}

func (m *CreateStreamRequest) GetSegmentMaxBytes() *NullableInt64 {
	if m != nil {
		return m.SegmentMaxBytes
	}
	return nil
}

func (m *CreateStreamRequest) GetSegmentMaxAge() *NullableInt64 {
	if m != nil {
		return m.SegmentMaxAge
	}
	return nil
}

func (m *CreateStreamRequest) GetCompactMaxGoroutines() *NullableInt32 {
	if m != nil {
		return m.CompactMaxGoroutines
	}
	return nil
}

func (m *CreateStreamRequest) GetCompactEnabled() *NullableBool {
	if m != nil {
		return m.CompactEnabled
	}
	return nil
}

func (m *CreateStreamRequest) GetAutoPauseTime() *NullableInt64 {
	if m != nil {
		return m.AutoPauseTime
	}
	return nil
}

func (m *CreateStreamRequest) GetAutoPauseDisableIfSubscribers() *NullableBool {
	if m != nil {
		return m.AutoPauseDisableIfSubscribers
	}
	return nil
}

func (m *CreateStreamRequest) GetMinIsr() *NullableInt32 {
	if m != nil {
		return m.MinIsr
	}
	return nil
}

func (m *CreateStreamRequest) GetOptimisticConcurrencyControl() *NullableBool {
	if m != nil {
		return m.OptimisticConcurrencyControl
	}
	return nil
}

func (m *CreateStreamRequest) GetEncryption() *NullableBool {
	if m != nil {
		return m.Encryption
	}
	return nil
}

// CreateStreamResponse is sent by server after creating a stream.
type CreateStreamResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamResponse) Reset()         { *m = CreateStreamResponse{} }
func (m *CreateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStreamResponse) ProtoMessage()    {}
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *CreateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamResponse.Merge(m, src)
}
func (m *CreateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamResponse proto.InternalMessageInfo

// DeleteStreamRequest is sent to delete a stream.
type DeleteStreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStreamRequest) Reset()         { *m = DeleteStreamRequest{} }
func (m *DeleteStreamRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStreamRequest) ProtoMessage()    {}
func (*DeleteStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *DeleteStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStreamRequest.Merge(m, src)
}
func (m *DeleteStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStreamRequest proto.InternalMessageInfo

func (m *DeleteStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DeleteStreamResponse is sent by server after deleting a stream.
type DeleteStreamResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStreamResponse) Reset()         { *m = DeleteStreamResponse{} }
func (m *DeleteStreamResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteStreamResponse) ProtoMessage()    {}
func (*DeleteStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *DeleteStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStreamResponse.Merge(m, src)
}
func (m *DeleteStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStreamResponse proto.InternalMessageInfo

// PauseStreamRequest is sent to pause the specified stream partitions. If no
// partitions are specified, this will pause all partitions in the stream.
// Partitions are resumed when they are published to via the Liftbridge Publish
// API.
type PauseStreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	ResumeAll            bool     `protobuf:"varint,3,opt,name=resumeAll,proto3" json:"resumeAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseStreamRequest) Reset()         { *m = PauseStreamRequest{} }
func (m *PauseStreamRequest) String() string { return proto.CompactTextString(m) }
func (*PauseStreamRequest) ProtoMessage()    {}
func (*PauseStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PauseStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseStreamRequest.Merge(m, src)
}
func (m *PauseStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *PauseStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseStreamRequest proto.InternalMessageInfo

func (m *PauseStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PauseStreamRequest) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *PauseStreamRequest) GetResumeAll() bool {
	if m != nil {
		return m.ResumeAll
	}
	return false
}

// PauseStreamResponse is sent by server after pausing a stream.
type PauseStreamResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseStreamResponse) Reset()         { *m = PauseStreamResponse{} }
func (m *PauseStreamResponse) String() string { return proto.CompactTextString(m) }
func (*PauseStreamResponse) ProtoMessage()    {}
func (*PauseStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *PauseStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseStreamResponse.Merge(m, src)
}
func (m *PauseStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *PauseStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PauseStreamResponse proto.InternalMessageInfo

// SetStreamReadonlyRequest is send to set a stream as read-only.
type SetStreamReadonlyRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	Readonly             bool     `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStreamReadonlyRequest) Reset()         { *m = SetStreamReadonlyRequest{} }
func (m *SetStreamReadonlyRequest) String() string { return proto.CompactTextString(m) }
func (*SetStreamReadonlyRequest) ProtoMessage()    {}
func (*SetStreamReadonlyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *SetStreamReadonlyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStreamReadonlyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStreamReadonlyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStreamReadonlyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStreamReadonlyRequest.Merge(m, src)
}
func (m *SetStreamReadonlyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetStreamReadonlyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStreamReadonlyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetStreamReadonlyRequest proto.InternalMessageInfo

func (m *SetStreamReadonlyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetStreamReadonlyRequest) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *SetStreamReadonlyRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

// SetStreamReadonlyResponse is sent by server after setting a stream's readonly
// flag.
type SetStreamReadonlyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStreamReadonlyResponse) Reset()         { *m = SetStreamReadonlyResponse{} }
func (m *SetStreamReadonlyResponse) String() string { return proto.CompactTextString(m) }
func (*SetStreamReadonlyResponse) ProtoMessage()    {}
func (*SetStreamReadonlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *SetStreamReadonlyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStreamReadonlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStreamReadonlyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStreamReadonlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStreamReadonlyResponse.Merge(m, src)
}
func (m *SetStreamReadonlyResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetStreamReadonlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStreamReadonlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetStreamReadonlyResponse proto.InternalMessageInfo

// Consumer contains information pertaining to a subscriber that is a member of
// a consumer group.
type Consumer struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupEpoch           uint64   `protobuf:"varint,2,opt,name=groupEpoch,proto3" json:"groupEpoch,omitempty"`
	ConsumerId           string   `protobuf:"bytes,3,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consumer) Reset()         { *m = Consumer{} }
func (m *Consumer) String() string { return proto.CompactTextString(m) }
func (*Consumer) ProtoMessage()    {}
func (*Consumer) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *Consumer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consumer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consumer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consumer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consumer.Merge(m, src)
}
func (m *Consumer) XXX_Size() int {
	return m.Size()
}
func (m *Consumer) XXX_DiscardUnknown() {
	xxx_messageInfo_Consumer.DiscardUnknown(m)
}

var xxx_messageInfo_Consumer proto.InternalMessageInfo

func (m *Consumer) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Consumer) GetGroupEpoch() uint64 {
	if m != nil {
		return m.GroupEpoch
	}
	return 0
}

func (m *Consumer) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

// SubscribeRequest is sent to subscribe to a stream partition.
type SubscribeRequest struct {
	Stream               string        `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32         `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	StartPosition        StartPosition `protobuf:"varint,3,opt,name=startPosition,proto3,enum=proto.StartPosition" json:"startPosition,omitempty"`
	StartOffset          int64         `protobuf:"varint,4,opt,name=startOffset,proto3" json:"startOffset,omitempty"`
	StartTimestamp       int64         `protobuf:"varint,5,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	ReadISRReplica       bool          `protobuf:"varint,6,opt,name=readISRReplica,proto3" json:"readISRReplica,omitempty"`
	Resume               bool          `protobuf:"varint,7,opt,name=resume,proto3" json:"resume,omitempty"`
	StopPosition         StopPosition  `protobuf:"varint,8,opt,name=stopPosition,proto3,enum=proto.StopPosition" json:"stopPosition,omitempty"`
	StopOffset           int64         `protobuf:"varint,9,opt,name=stopOffset,proto3" json:"stopOffset,omitempty"`
	StopTimestamp        int64         `protobuf:"varint,10,opt,name=stopTimestamp,proto3" json:"stopTimestamp,omitempty"`
	Consumer             *Consumer     `protobuf:"bytes,11,opt,name=consumer,proto3" json:"consumer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *SubscribeRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *SubscribeRequest) GetStartPosition() StartPosition {
	if m != nil {
		return m.StartPosition
	}
	return StartPosition_NEW_ONLY
}

func (m *SubscribeRequest) GetStartOffset() int64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *SubscribeRequest) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *SubscribeRequest) GetReadISRReplica() bool {
	if m != nil {
		return m.ReadISRReplica
	}
	return false
}

func (m *SubscribeRequest) GetResume() bool {
	if m != nil {
		return m.Resume
	}
	return false
}

func (m *SubscribeRequest) GetStopPosition() StopPosition {
	if m != nil {
		return m.StopPosition
	}
	return StopPosition_STOP_ON_CANCEL
}

func (m *SubscribeRequest) GetStopOffset() int64 {
	if m != nil {
		return m.StopOffset
	}
	return 0
}

func (m *SubscribeRequest) GetStopTimestamp() int64 {
	if m != nil {
		return m.StopTimestamp
	}
	return 0
}

func (m *SubscribeRequest) GetConsumer() *Consumer {
	if m != nil {
		return m.Consumer
	}
	return nil
}

// FetchMetadataRequest is sent to retrieve the latest cluster metadata.
type FetchMetadataRequest struct {
	Streams              []string `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	Groups               []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchMetadataRequest) Reset()         { *m = FetchMetadataRequest{} }
func (m *FetchMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*FetchMetadataRequest) ProtoMessage()    {}
func (*FetchMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *FetchMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetadataRequest.Merge(m, src)
}
func (m *FetchMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetadataRequest proto.InternalMessageInfo

func (m *FetchMetadataRequest) GetStreams() []string {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *FetchMetadataRequest) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

// FetchMetadataResponse contains the cluster metadata requested.
type FetchMetadataResponse struct {
	Brokers              []*Broker                `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	StreamMetadata       []*StreamMetadata        `protobuf:"bytes,2,rep,name=streamMetadata,proto3" json:"streamMetadata,omitempty"`
	GroupMetadata        []*ConsumerGroupMetadata `protobuf:"bytes,3,rep,name=groupMetadata,proto3" json:"groupMetadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FetchMetadataResponse) Reset()         { *m = FetchMetadataResponse{} }
func (m *FetchMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*FetchMetadataResponse) ProtoMessage()    {}
func (*FetchMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *FetchMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetadataResponse.Merge(m, src)
}
func (m *FetchMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetadataResponse proto.InternalMessageInfo

func (m *FetchMetadataResponse) GetBrokers() []*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *FetchMetadataResponse) GetStreamMetadata() []*StreamMetadata {
	if m != nil {
		return m.StreamMetadata
	}
	return nil
}

func (m *FetchMetadataResponse) GetGroupMetadata() []*ConsumerGroupMetadata {
	if m != nil {
		return m.GroupMetadata
	}
	return nil
}

// FetchPartitionMetadataRequest is sent to retrieve latest partition metadata.
// Mainly it is useful to retrieve Highest Watermark and Highest Offset of the partition leader
type FetchPartitionMetadataRequest struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchPartitionMetadataRequest) Reset()         { *m = FetchPartitionMetadataRequest{} }
func (m *FetchPartitionMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*FetchPartitionMetadataRequest) ProtoMessage()    {}
func (*FetchPartitionMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *FetchPartitionMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchPartitionMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchPartitionMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchPartitionMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchPartitionMetadataRequest.Merge(m, src)
}
func (m *FetchPartitionMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchPartitionMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchPartitionMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchPartitionMetadataRequest proto.InternalMessageInfo

func (m *FetchPartitionMetadataRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *FetchPartitionMetadataRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

//  FetchPartitionMetadataResponse contains the partition metadata requested
type FetchPartitionMetadataResponse struct {
	Metadata             *PartitionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FetchPartitionMetadataResponse) Reset()         { *m = FetchPartitionMetadataResponse{} }
func (m *FetchPartitionMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*FetchPartitionMetadataResponse) ProtoMessage()    {}
func (*FetchPartitionMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *FetchPartitionMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchPartitionMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchPartitionMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchPartitionMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchPartitionMetadataResponse.Merge(m, src)
}
func (m *FetchPartitionMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchPartitionMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchPartitionMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchPartitionMetadataResponse proto.InternalMessageInfo

func (m *FetchPartitionMetadataResponse) GetMetadata() *PartitionMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// PublishRequest is sent to publish a new message to a stream.
type PublishRequest struct {
	Key                  []byte            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Stream               string            `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32             `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AckInbox             string            `protobuf:"bytes,6,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string            `protobuf:"bytes,7,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy         `protobuf:"varint,8,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	ExpectedOffset       int64             `protobuf:"varint,9,opt,name=expectedOffset,proto3" json:"expectedOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PublishRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PublishRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *PublishRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *PublishRequest) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PublishRequest) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *PublishRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *PublishRequest) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

func (m *PublishRequest) GetExpectedOffset() int64 {
	if m != nil {
		return m.ExpectedOffset
	}
	return 0
}

// PublishAsyncError is returned on the PublishAsync stream if a publish failed.
type PublishAsyncError struct {
	Code                 PublishAsyncError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=proto.PublishAsyncError_Code" json:"code,omitempty"`
	Message              string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PublishAsyncError) Reset()         { *m = PublishAsyncError{} }
func (m *PublishAsyncError) String() string { return proto.CompactTextString(m) }
func (*PublishAsyncError) ProtoMessage()    {}
func (*PublishAsyncError) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *PublishAsyncError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishAsyncError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishAsyncError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishAsyncError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishAsyncError.Merge(m, src)
}
func (m *PublishAsyncError) XXX_Size() int {
	return m.Size()
}
func (m *PublishAsyncError) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishAsyncError.DiscardUnknown(m)
}

var xxx_messageInfo_PublishAsyncError proto.InternalMessageInfo

func (m *PublishAsyncError) GetCode() PublishAsyncError_Code {
	if m != nil {
		return m.Code
	}
	return PublishAsyncError_UNKNOWN
}

func (m *PublishAsyncError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PublishResponse is sent by the server after publishing a message to a
// stream.
type PublishResponse struct {
	Ack                  *Ack               `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	AsyncError           *PublishAsyncError `protobuf:"bytes,2,opt,name=asyncError,proto3" json:"asyncError,omitempty"`
	CorrelationId        string             `protobuf:"bytes,3,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *PublishResponse) GetAsyncError() *PublishAsyncError {
	if m != nil {
		return m.AsyncError
	}
	return nil
}

func (m *PublishResponse) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// PublishToSubjectRequest is sent to publish a Liftbridge message to a NATS
// subject.
type PublishToSubjectRequest struct {
	Key                  []byte            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Subject              string            `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AckInbox             string            `protobuf:"bytes,5,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string            `protobuf:"bytes,6,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy         `protobuf:"varint,7,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishToSubjectRequest) Reset()         { *m = PublishToSubjectRequest{} }
func (m *PublishToSubjectRequest) String() string { return proto.CompactTextString(m) }
func (*PublishToSubjectRequest) ProtoMessage()    {}
func (*PublishToSubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *PublishToSubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishToSubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishToSubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishToSubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishToSubjectRequest.Merge(m, src)
}
func (m *PublishToSubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishToSubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishToSubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishToSubjectRequest proto.InternalMessageInfo

func (m *PublishToSubjectRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PublishToSubjectRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PublishToSubjectRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *PublishToSubjectRequest) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PublishToSubjectRequest) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *PublishToSubjectRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *PublishToSubjectRequest) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

// PublishToSubjectResponse is sent by the server after publishing a message to
// a NATS subject.
type PublishToSubjectResponse struct {
	Ack                  *Ack     `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishToSubjectResponse) Reset()         { *m = PublishToSubjectResponse{} }
func (m *PublishToSubjectResponse) String() string { return proto.CompactTextString(m) }
func (*PublishToSubjectResponse) ProtoMessage()    {}
func (*PublishToSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *PublishToSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishToSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishToSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishToSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishToSubjectResponse.Merge(m, src)
}
func (m *PublishToSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishToSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishToSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishToSubjectResponse proto.InternalMessageInfo

func (m *PublishToSubjectResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

// SetCursorRequest is sent to set a consumer's cursor position for a
// particular stream partition.
type SetCursorRequest struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	CursorId             string   `protobuf:"bytes,3,opt,name=cursorId,proto3" json:"cursorId,omitempty"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCursorRequest) Reset()         { *m = SetCursorRequest{} }
func (m *SetCursorRequest) String() string { return proto.CompactTextString(m) }
func (*SetCursorRequest) ProtoMessage()    {}
func (*SetCursorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *SetCursorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCursorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCursorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCursorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCursorRequest.Merge(m, src)
}
func (m *SetCursorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetCursorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCursorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetCursorRequest proto.InternalMessageInfo

func (m *SetCursorRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *SetCursorRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *SetCursorRequest) GetCursorId() string {
	if m != nil {
		return m.CursorId
	}
	return ""
}

func (m *SetCursorRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// SetCursorResponse is sent by the server after setting a consumer cursor.
type SetCursorResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCursorResponse) Reset()         { *m = SetCursorResponse{} }
func (m *SetCursorResponse) String() string { return proto.CompactTextString(m) }
func (*SetCursorResponse) ProtoMessage()    {}
func (*SetCursorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *SetCursorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCursorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCursorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCursorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCursorResponse.Merge(m, src)
}
func (m *SetCursorResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetCursorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCursorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetCursorResponse proto.InternalMessageInfo

// FetchCursorRequest is sent to retrieve a consumer's cursor position for a
// particular stream partition.
type FetchCursorRequest struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	CursorId             string   `protobuf:"bytes,3,opt,name=cursorId,proto3" json:"cursorId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchCursorRequest) Reset()         { *m = FetchCursorRequest{} }
func (m *FetchCursorRequest) String() string { return proto.CompactTextString(m) }
func (*FetchCursorRequest) ProtoMessage()    {}
func (*FetchCursorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *FetchCursorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchCursorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchCursorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchCursorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCursorRequest.Merge(m, src)
}
func (m *FetchCursorRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchCursorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCursorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCursorRequest proto.InternalMessageInfo

func (m *FetchCursorRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *FetchCursorRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *FetchCursorRequest) GetCursorId() string {
	if m != nil {
		return m.CursorId
	}
	return ""
}

// FetchCursorResponse contains the requested consumer cursor position.
type FetchCursorResponse struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchCursorResponse) Reset()         { *m = FetchCursorResponse{} }
func (m *FetchCursorResponse) String() string { return proto.CompactTextString(m) }
func (*FetchCursorResponse) ProtoMessage()    {}
func (*FetchCursorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *FetchCursorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchCursorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchCursorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchCursorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCursorResponse.Merge(m, src)
}
func (m *FetchCursorResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchCursorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCursorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCursorResponse proto.InternalMessageInfo

func (m *FetchCursorResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// JoinConsumerGroupRequest is sent to add a consumer to a consumer group.
type JoinConsumerGroupRequest struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	Streams              []string `protobuf:"bytes,3,rep,name=streams,proto3" json:"streams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinConsumerGroupRequest) Reset()         { *m = JoinConsumerGroupRequest{} }
func (m *JoinConsumerGroupRequest) String() string { return proto.CompactTextString(m) }
func (*JoinConsumerGroupRequest) ProtoMessage()    {}
func (*JoinConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *JoinConsumerGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinConsumerGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinConsumerGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinConsumerGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinConsumerGroupRequest.Merge(m, src)
}
func (m *JoinConsumerGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinConsumerGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinConsumerGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinConsumerGroupRequest proto.InternalMessageInfo

func (m *JoinConsumerGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *JoinConsumerGroupRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *JoinConsumerGroupRequest) GetStreams() []string {
	if m != nil {
		return m.Streams
	}
	return nil
}

// JoinConsumerGroupResponse is sent by the server after adding a consumer to a
// consumer group.
type JoinConsumerGroupResponse struct {
	Coordinator          string   `protobuf:"bytes,1,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	Epoch                uint64   `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ConsumersTimeout     int64    `protobuf:"varint,3,opt,name=consumersTimeout,proto3" json:"consumersTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinConsumerGroupResponse) Reset()         { *m = JoinConsumerGroupResponse{} }
func (m *JoinConsumerGroupResponse) String() string { return proto.CompactTextString(m) }
func (*JoinConsumerGroupResponse) ProtoMessage()    {}
func (*JoinConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *JoinConsumerGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinConsumerGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinConsumerGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinConsumerGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinConsumerGroupResponse.Merge(m, src)
}
func (m *JoinConsumerGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinConsumerGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinConsumerGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinConsumerGroupResponse proto.InternalMessageInfo

func (m *JoinConsumerGroupResponse) GetCoordinator() string {
	if m != nil {
		return m.Coordinator
	}
	return ""
}

func (m *JoinConsumerGroupResponse) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *JoinConsumerGroupResponse) GetConsumersTimeout() int64 {
	if m != nil {
		return m.ConsumersTimeout
	}
	return 0
}

// FetchConsumerGroupAssignmentsRequest is sent to a consumer group coordinator
// to retrieve the consumer's partition assignments.
type FetchConsumerGroupAssignmentsRequest struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	ConsumerId           string   `protobuf:"bytes,2,opt,name=consumerId,proto3" json:"consumerId,omitempty"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchConsumerGroupAssignmentsRequest) Reset()         { *m = FetchConsumerGroupAssignmentsRequest{} }
func (m *FetchConsumerGroupAssignmentsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchConsumerGroupAssignmentsRequest) ProtoMessage()    {}
func (*FetchConsumerGroupAssignmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *FetchConsumerGroupAssignmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConsumerGroupAssignmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConsumerGroupAssignmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConsumerGroupAssignmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConsumerGroupAssignmentsRequest.Merge(m, src)
}
func (m *FetchConsumerGroupAssignmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchConsumerGroupAssignmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConsumerGroupAssignmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConsumerGroupAssignmentsRequest proto.InternalMessageInfo

func (m *FetchConsumerGroupAssignmentsRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *FetchConsumerGroupAssignmentsRequest) GetConsumerId() string {
	if m != nil {
		return m.ConsumerId
	}
	return ""
}

func (m *FetchConsumerGroupAssignmentsRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// PartitionAssignment contains a set of stream partitions that are assigned to
// a consumer.
type PartitionAssignment struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionAssignment) Reset()         { *m = PartitionAssignment{} }
func (m *PartitionAssignment) String() string { return proto.CompactTextString(m) }
func (*PartitionAssignment) ProtoMessage()    {}
func (*PartitionAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *PartitionAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionAssignment.Merge(m, src)
}
func (m *PartitionAssignment) XXX_Size() int {
	return m.Size()
}
func (m *PartitionAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionAssignment proto.InternalMessageInfo

func (m *PartitionAssignment) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *PartitionAssignment) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

// FetchConsumerGroupAssignmentsResponse is sent by the group coordinator to
// notify the consumer of its partition assignments.
type FetchConsumerGroupAssignmentsResponse struct {
	Epoch                uint64                 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Assignments          []*PartitionAssignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FetchConsumerGroupAssignmentsResponse) Reset()         { *m = FetchConsumerGroupAssignmentsResponse{} }
func (m *FetchConsumerGroupAssignmentsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchConsumerGroupAssignmentsResponse) ProtoMessage()    {}
func (*FetchConsumerGroupAssignmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *FetchConsumerGroupAssignmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchConsumerGroupAssignmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchConsumerGroupAssignmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchConsumerGroupAssignmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchConsumerGroupAssignmentsResponse.Merge(m, src)
}
func (m *FetchConsumerGroupAssignmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchConsumerGroupAssignmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchConsumerGroupAssignmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchConsumerGroupAssignmentsResponse proto.InternalMessageInfo

func (m *FetchConsumerGroupAssignmentsResponse) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *FetchConsumerGroupAssignmentsResponse) GetAssignments() []*PartitionAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

// Broker contains information for a Liftbridge broker.
type Broker struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	PartitionCount       int32    `protobuf:"varint,4,opt,name=partitionCount,proto3" json:"partitionCount,omitempty"`
	LeaderCount          int32    `protobuf:"varint,5,opt,name=leaderCount,proto3" json:"leaderCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *Broker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return m.Size()
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Broker) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Broker) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Broker) GetPartitionCount() int32 {
	if m != nil {
		return m.PartitionCount
	}
	return 0
}

func (m *Broker) GetLeaderCount() int32 {
	if m != nil {
		return m.LeaderCount
	}
	return 0
}

// StreamMetadata contains information for a stream.
type StreamMetadata struct {
	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subject              string                       `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Error                StreamMetadata_Error         `protobuf:"varint,3,opt,name=error,proto3,enum=proto.StreamMetadata_Error" json:"error,omitempty"`
	Partitions           map[int32]*PartitionMetadata `protobuf:"bytes,4,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp    int64                        `protobuf:"varint,5,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StreamMetadata) Reset()         { *m = StreamMetadata{} }
func (m *StreamMetadata) String() string { return proto.CompactTextString(m) }
func (*StreamMetadata) ProtoMessage()    {}
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *StreamMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMetadata.Merge(m, src)
}
func (m *StreamMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StreamMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMetadata proto.InternalMessageInfo

func (m *StreamMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamMetadata) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *StreamMetadata) GetError() StreamMetadata_Error {
	if m != nil {
		return m.Error
	}
	return StreamMetadata_OK
}

func (m *StreamMetadata) GetPartitions() map[int32]*PartitionMetadata {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *StreamMetadata) GetCreationTimestamp() int64 {
	if m != nil {
		return m.CreationTimestamp
	}
	return 0
}

// ConsumerGroupMetadata contains information for a consumer group.
type ConsumerGroupMetadata struct {
	GroupId              string                      `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Error                ConsumerGroupMetadata_Error `protobuf:"varint,2,opt,name=error,proto3,enum=proto.ConsumerGroupMetadata_Error" json:"error,omitempty"`
	Coordinator          string                      `protobuf:"bytes,3,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	Epoch                uint64                      `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ConsumerGroupMetadata) Reset()         { *m = ConsumerGroupMetadata{} }
func (m *ConsumerGroupMetadata) String() string { return proto.CompactTextString(m) }
func (*ConsumerGroupMetadata) ProtoMessage()    {}
func (*ConsumerGroupMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *ConsumerGroupMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerGroupMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerGroupMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerGroupMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerGroupMetadata.Merge(m, src)
}
func (m *ConsumerGroupMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerGroupMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerGroupMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerGroupMetadata proto.InternalMessageInfo

func (m *ConsumerGroupMetadata) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *ConsumerGroupMetadata) GetError() ConsumerGroupMetadata_Error {
	if m != nil {
		return m.Error
	}
	return ConsumerGroupMetadata_OK
}

func (m *ConsumerGroupMetadata) GetCoordinator() string {
	if m != nil {
		return m.Coordinator
	}
	return ""
}

func (m *ConsumerGroupMetadata) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// PartitionEventTimestamps contains timestamps related to a stream partition.
type PartitionEventTimestamps struct {
	FirstTimestamp       int64    `protobuf:"varint,1,opt,name=firstTimestamp,proto3" json:"firstTimestamp,omitempty"`
	LatestTimestamp      int64    `protobuf:"varint,2,opt,name=latestTimestamp,proto3" json:"latestTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionEventTimestamps) Reset()         { *m = PartitionEventTimestamps{} }
func (m *PartitionEventTimestamps) String() string { return proto.CompactTextString(m) }
func (*PartitionEventTimestamps) ProtoMessage()    {}
func (*PartitionEventTimestamps) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *PartitionEventTimestamps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionEventTimestamps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionEventTimestamps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionEventTimestamps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionEventTimestamps.Merge(m, src)
}
func (m *PartitionEventTimestamps) XXX_Size() int {
	return m.Size()
}
func (m *PartitionEventTimestamps) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionEventTimestamps.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionEventTimestamps proto.InternalMessageInfo

func (m *PartitionEventTimestamps) GetFirstTimestamp() int64 {
	if m != nil {
		return m.FirstTimestamp
	}
	return 0
}

func (m *PartitionEventTimestamps) GetLatestTimestamp() int64 {
	if m != nil {
		return m.LatestTimestamp
	}
	return 0
}

// PartitionMetadata contains information for a stream partition.
type PartitionMetadata struct {
	Id                         int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Leader                     string                    `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Replicas                   []string                  `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Isr                        []string                  `protobuf:"bytes,4,rep,name=isr,proto3" json:"isr,omitempty"`
	HighWatermark              int64                     `protobuf:"varint,5,opt,name=highWatermark,proto3" json:"highWatermark,omitempty"`
	NewestOffset               int64                     `protobuf:"varint,6,opt,name=newestOffset,proto3" json:"newestOffset,omitempty"`
	Paused                     bool                      `protobuf:"varint,7,opt,name=paused,proto3" json:"paused,omitempty"`
	Readonly                   bool                      `protobuf:"varint,8,opt,name=readonly,proto3" json:"readonly,omitempty"`
	MessagesReceivedTimestamps *PartitionEventTimestamps `protobuf:"bytes,9,opt,name=messagesReceivedTimestamps,proto3" json:"messagesReceivedTimestamps,omitempty"`
	PauseTimestamps            *PartitionEventTimestamps `protobuf:"bytes,10,opt,name=pauseTimestamps,proto3" json:"pauseTimestamps,omitempty"`
	ReadonlyTimestamps         *PartitionEventTimestamps `protobuf:"bytes,11,opt,name=readonlyTimestamps,proto3" json:"readonlyTimestamps,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                  `json:"-"`
	XXX_unrecognized           []byte                    `json:"-"`
	XXX_sizecache              int32                     `json:"-"`
}

func (m *PartitionMetadata) Reset()         { *m = PartitionMetadata{} }
func (m *PartitionMetadata) String() string { return proto.CompactTextString(m) }
func (*PartitionMetadata) ProtoMessage()    {}
func (*PartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *PartitionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionMetadata.Merge(m, src)
}
func (m *PartitionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionMetadata proto.InternalMessageInfo

func (m *PartitionMetadata) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PartitionMetadata) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *PartitionMetadata) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *PartitionMetadata) GetIsr() []string {
	if m != nil {
		return m.Isr
	}
	return nil
}

func (m *PartitionMetadata) GetHighWatermark() int64 {
	if m != nil {
		return m.HighWatermark
	}
	return 0
}

func (m *PartitionMetadata) GetNewestOffset() int64 {
	if m != nil {
		return m.NewestOffset
	}
	return 0
}

func (m *PartitionMetadata) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *PartitionMetadata) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *PartitionMetadata) GetMessagesReceivedTimestamps() *PartitionEventTimestamps {
	if m != nil {
		return m.MessagesReceivedTimestamps
	}
	return nil
}

func (m *PartitionMetadata) GetPauseTimestamps() *PartitionEventTimestamps {
	if m != nil {
		return m.PauseTimestamps
	}
	return nil
}

func (m *PartitionMetadata) GetReadonlyTimestamps() *PartitionEventTimestamps {
	if m != nil {
		return m.ReadonlyTimestamps
	}
	return nil
}

// Message represents a message from a stream.
type Message struct {
	Offset               int64             `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Key                  []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Stream               string            `protobuf:"bytes,5,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32             `protobuf:"varint,6,opt,name=partition,proto3" json:"partition,omitempty"`
	Subject              string            `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	ReplySubject         string            `protobuf:"bytes,8,opt,name=replySubject,proto3" json:"replySubject,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AckInbox             string            `protobuf:"bytes,10,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string            `protobuf:"bytes,11,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy         `protobuf:"varint,12,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Message) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Message) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *Message) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Message) GetReplySubject() string {
	if m != nil {
		return m.ReplySubject
	}
	return ""
}

func (m *Message) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Message) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *Message) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Message) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

// Ack represents an acknowledgement that a message was committed to a stream
// partition.
type Ack struct {
	Stream               string    `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	PartitionSubject     string    `protobuf:"bytes,2,opt,name=partitionSubject,proto3" json:"partitionSubject,omitempty"`
	MsgSubject           string    `protobuf:"bytes,3,opt,name=msgSubject,proto3" json:"msgSubject,omitempty"`
	Offset               int64     `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	AckInbox             string    `protobuf:"bytes,5,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string    `protobuf:"bytes,6,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy `protobuf:"varint,7,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	ReceptionTimestamp   int64     `protobuf:"varint,8,opt,name=receptionTimestamp,proto3" json:"receptionTimestamp,omitempty"`
	CommitTimestamp      int64     `protobuf:"varint,9,opt,name=commitTimestamp,proto3" json:"commitTimestamp,omitempty"`
	AckError             Ack_Error `protobuf:"varint,10,opt,name=ackError,proto3,enum=proto.Ack_Error" json:"ackError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Ack) GetPartitionSubject() string {
	if m != nil {
		return m.PartitionSubject
	}
	return ""
}

func (m *Ack) GetMsgSubject() string {
	if m != nil {
		return m.MsgSubject
	}
	return ""
}

func (m *Ack) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Ack) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *Ack) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Ack) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

func (m *Ack) GetReceptionTimestamp() int64 {
	if m != nil {
		return m.ReceptionTimestamp
	}
	return 0
}

func (m *Ack) GetCommitTimestamp() int64 {
	if m != nil {
		return m.CommitTimestamp
	}
	return 0
}

func (m *Ack) GetAckError() Ack_Error {
	if m != nil {
		return m.AckError
	}
	return Ack_OK
}

// CreateStreamOp represents a stream creation operation.
type CreateStreamOp struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamOp) Reset()         { *m = CreateStreamOp{} }
func (m *CreateStreamOp) String() string { return proto.CompactTextString(m) }
func (*CreateStreamOp) ProtoMessage()    {}
func (*CreateStreamOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *CreateStreamOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStreamOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStreamOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStreamOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamOp.Merge(m, src)
}
func (m *CreateStreamOp) XXX_Size() int {
	return m.Size()
}
func (m *CreateStreamOp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamOp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamOp proto.InternalMessageInfo

func (m *CreateStreamOp) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *CreateStreamOp) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

// DeleteStreamOp represents a stream deletion operation.
type DeleteStreamOp struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStreamOp) Reset()         { *m = DeleteStreamOp{} }
func (m *DeleteStreamOp) String() string { return proto.CompactTextString(m) }
func (*DeleteStreamOp) ProtoMessage()    {}
func (*DeleteStreamOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *DeleteStreamOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStreamOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStreamOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStreamOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStreamOp.Merge(m, src)
}
func (m *DeleteStreamOp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStreamOp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStreamOp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStreamOp proto.InternalMessageInfo

func (m *DeleteStreamOp) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

// PauseStreamOp represents a stream pause operation.
type PauseStreamOp struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	ResumeAll            bool     `protobuf:"varint,3,opt,name=resumeAll,proto3" json:"resumeAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseStreamOp) Reset()         { *m = PauseStreamOp{} }
func (m *PauseStreamOp) String() string { return proto.CompactTextString(m) }
func (*PauseStreamOp) ProtoMessage()    {}
func (*PauseStreamOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *PauseStreamOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseStreamOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseStreamOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseStreamOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseStreamOp.Merge(m, src)
}
func (m *PauseStreamOp) XXX_Size() int {
	return m.Size()
}
func (m *PauseStreamOp) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseStreamOp.DiscardUnknown(m)
}

var xxx_messageInfo_PauseStreamOp proto.InternalMessageInfo

func (m *PauseStreamOp) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *PauseStreamOp) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *PauseStreamOp) GetResumeAll() bool {
	if m != nil {
		return m.ResumeAll
	}
	return false
}

// ResumeStreamOp represents a stream resume operation.
type ResumeStreamOp struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeStreamOp) Reset()         { *m = ResumeStreamOp{} }
func (m *ResumeStreamOp) String() string { return proto.CompactTextString(m) }
func (*ResumeStreamOp) ProtoMessage()    {}
func (*ResumeStreamOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *ResumeStreamOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResumeStreamOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResumeStreamOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResumeStreamOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeStreamOp.Merge(m, src)
}
func (m *ResumeStreamOp) XXX_Size() int {
	return m.Size()
}
func (m *ResumeStreamOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeStreamOp.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeStreamOp proto.InternalMessageInfo

func (m *ResumeStreamOp) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *ResumeStreamOp) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

// ReadonlyStreamOp represents a stream readonly operation.
type SetStreamReadonlyOp struct {
	Stream               string   `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partitions           []int32  `protobuf:"varint,2,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	Readonly             bool     `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStreamReadonlyOp) Reset()         { *m = SetStreamReadonlyOp{} }
func (m *SetStreamReadonlyOp) String() string { return proto.CompactTextString(m) }
func (*SetStreamReadonlyOp) ProtoMessage()    {}
func (*SetStreamReadonlyOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *SetStreamReadonlyOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStreamReadonlyOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStreamReadonlyOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStreamReadonlyOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStreamReadonlyOp.Merge(m, src)
}
func (m *SetStreamReadonlyOp) XXX_Size() int {
	return m.Size()
}
func (m *SetStreamReadonlyOp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStreamReadonlyOp.DiscardUnknown(m)
}

var xxx_messageInfo_SetStreamReadonlyOp proto.InternalMessageInfo

func (m *SetStreamReadonlyOp) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *SetStreamReadonlyOp) GetPartitions() []int32 {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (m *SetStreamReadonlyOp) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

// ActivityStreamEvent represents an entry into the activity stream.
type ActivityStreamEvent struct {
	Id                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Op                   ActivityStreamOp     `protobuf:"varint,2,opt,name=op,proto3,enum=proto.ActivityStreamOp" json:"op,omitempty"`
	CreateStreamOp       *CreateStreamOp      `protobuf:"bytes,3,opt,name=createStreamOp,proto3" json:"createStreamOp,omitempty"`
	DeleteStreamOp       *DeleteStreamOp      `protobuf:"bytes,4,opt,name=deleteStreamOp,proto3" json:"deleteStreamOp,omitempty"`
	PauseStreamOp        *PauseStreamOp       `protobuf:"bytes,5,opt,name=pauseStreamOp,proto3" json:"pauseStreamOp,omitempty"`
	ResumeStreamOp       *ResumeStreamOp      `protobuf:"bytes,6,opt,name=resumeStreamOp,proto3" json:"resumeStreamOp,omitempty"`
	SetStreamReadonlyOp  *SetStreamReadonlyOp `protobuf:"bytes,7,opt,name=setStreamReadonlyOp,proto3" json:"setStreamReadonlyOp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ActivityStreamEvent) Reset()         { *m = ActivityStreamEvent{} }
func (m *ActivityStreamEvent) String() string { return proto.CompactTextString(m) }
func (*ActivityStreamEvent) ProtoMessage()    {}
func (*ActivityStreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *ActivityStreamEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityStreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityStreamEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityStreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityStreamEvent.Merge(m, src)
}
func (m *ActivityStreamEvent) XXX_Size() int {
	return m.Size()
}
func (m *ActivityStreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityStreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityStreamEvent proto.InternalMessageInfo

func (m *ActivityStreamEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActivityStreamEvent) GetOp() ActivityStreamOp {
	if m != nil {
		return m.Op
	}
	return ActivityStreamOp_CREATE_STREAM
}

func (m *ActivityStreamEvent) GetCreateStreamOp() *CreateStreamOp {
	if m != nil {
		return m.CreateStreamOp
	}
	return nil
}

func (m *ActivityStreamEvent) GetDeleteStreamOp() *DeleteStreamOp {
	if m != nil {
		return m.DeleteStreamOp
	}
	return nil
}

func (m *ActivityStreamEvent) GetPauseStreamOp() *PauseStreamOp {
	if m != nil {
		return m.PauseStreamOp
	}
	return nil
}

func (m *ActivityStreamEvent) GetResumeStreamOp() *ResumeStreamOp {
	if m != nil {
		return m.ResumeStreamOp
	}
	return nil
}

func (m *ActivityStreamEvent) GetSetStreamReadonlyOp() *SetStreamReadonlyOp {
	if m != nil {
		return m.SetStreamReadonlyOp
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.StartPosition", StartPosition_name, StartPosition_value)
	proto.RegisterEnum("proto.StopPosition", StopPosition_name, StopPosition_value)
	proto.RegisterEnum("proto.AckPolicy", AckPolicy_name, AckPolicy_value)
	proto.RegisterEnum("proto.ActivityStreamOp", ActivityStreamOp_name, ActivityStreamOp_value)
	proto.RegisterEnum("proto.PublishAsyncError_Code", PublishAsyncError_Code_name, PublishAsyncError_Code_value)
	proto.RegisterEnum("proto.StreamMetadata_Error", StreamMetadata_Error_name, StreamMetadata_Error_value)
	proto.RegisterEnum("proto.ConsumerGroupMetadata_Error", ConsumerGroupMetadata_Error_name, ConsumerGroupMetadata_Error_value)
	proto.RegisterEnum("proto.Ack_Error", Ack_Error_name, Ack_Error_value)
	proto.RegisterType((*NullableInt64)(nil), "proto.NullableInt64")
	proto.RegisterType((*NullableInt32)(nil), "proto.NullableInt32")
	proto.RegisterType((*NullableBool)(nil), "proto.NullableBool")
	proto.RegisterType((*CreateStreamRequest)(nil), "proto.CreateStreamRequest")
	proto.RegisterType((*CreateStreamResponse)(nil), "proto.CreateStreamResponse")
	proto.RegisterType((*DeleteStreamRequest)(nil), "proto.DeleteStreamRequest")
	proto.RegisterType((*DeleteStreamResponse)(nil), "proto.DeleteStreamResponse")
	proto.RegisterType((*PauseStreamRequest)(nil), "proto.PauseStreamRequest")
	proto.RegisterType((*PauseStreamResponse)(nil), "proto.PauseStreamResponse")
	proto.RegisterType((*SetStreamReadonlyRequest)(nil), "proto.SetStreamReadonlyRequest")
	proto.RegisterType((*SetStreamReadonlyResponse)(nil), "proto.SetStreamReadonlyResponse")
	proto.RegisterType((*Consumer)(nil), "proto.Consumer")
	proto.RegisterType((*SubscribeRequest)(nil), "proto.SubscribeRequest")
	proto.RegisterType((*FetchMetadataRequest)(nil), "proto.FetchMetadataRequest")
	proto.RegisterType((*FetchMetadataResponse)(nil), "proto.FetchMetadataResponse")
	proto.RegisterType((*FetchPartitionMetadataRequest)(nil), "proto.FetchPartitionMetadataRequest")
	proto.RegisterType((*FetchPartitionMetadataResponse)(nil), "proto.FetchPartitionMetadataResponse")
	proto.RegisterType((*PublishRequest)(nil), "proto.PublishRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.PublishRequest.HeadersEntry")
	proto.RegisterType((*PublishAsyncError)(nil), "proto.PublishAsyncError")
	proto.RegisterType((*PublishResponse)(nil), "proto.PublishResponse")
	proto.RegisterType((*PublishToSubjectRequest)(nil), "proto.PublishToSubjectRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.PublishToSubjectRequest.HeadersEntry")
	proto.RegisterType((*PublishToSubjectResponse)(nil), "proto.PublishToSubjectResponse")
	proto.RegisterType((*SetCursorRequest)(nil), "proto.SetCursorRequest")
	proto.RegisterType((*SetCursorResponse)(nil), "proto.SetCursorResponse")
	proto.RegisterType((*FetchCursorRequest)(nil), "proto.FetchCursorRequest")
	proto.RegisterType((*FetchCursorResponse)(nil), "proto.FetchCursorResponse")
	proto.RegisterType((*JoinConsumerGroupRequest)(nil), "proto.JoinConsumerGroupRequest")
	proto.RegisterType((*JoinConsumerGroupResponse)(nil), "proto.JoinConsumerGroupResponse")
	proto.RegisterType((*FetchConsumerGroupAssignmentsRequest)(nil), "proto.FetchConsumerGroupAssignmentsRequest")
	proto.RegisterType((*PartitionAssignment)(nil), "proto.PartitionAssignment")
	proto.RegisterType((*FetchConsumerGroupAssignmentsResponse)(nil), "proto.FetchConsumerGroupAssignmentsResponse")
	proto.RegisterType((*Broker)(nil), "proto.Broker")
	proto.RegisterType((*StreamMetadata)(nil), "proto.StreamMetadata")
	proto.RegisterMapType((map[int32]*PartitionMetadata)(nil), "proto.StreamMetadata.PartitionsEntry")
	proto.RegisterType((*ConsumerGroupMetadata)(nil), "proto.ConsumerGroupMetadata")
	proto.RegisterType((*PartitionEventTimestamps)(nil), "proto.PartitionEventTimestamps")
	proto.RegisterType((*PartitionMetadata)(nil), "proto.PartitionMetadata")
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.Message.HeadersEntry")
	proto.RegisterType((*Ack)(nil), "proto.Ack")
	proto.RegisterType((*CreateStreamOp)(nil), "proto.CreateStreamOp")
	proto.RegisterType((*DeleteStreamOp)(nil), "proto.DeleteStreamOp")
	proto.RegisterType((*PauseStreamOp)(nil), "proto.PauseStreamOp")
	proto.RegisterType((*ResumeStreamOp)(nil), "proto.ResumeStreamOp")
	proto.RegisterType((*SetStreamReadonlyOp)(nil), "proto.SetStreamReadonlyOp")
	proto.RegisterType((*ActivityStreamEvent)(nil), "proto.ActivityStreamEvent")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x41, 0x73, 0xdb, 0xc6,
	0xf5, 0x17, 0x08, 0x91, 0x22, 0x9f, 0x48, 0x0a, 0x5a, 0xda, 0x0e, 0xc2, 0x38, 0x8a, 0x06, 0x7f,
	0x3b, 0xf1, 0x5f, 0xf1, 0x68, 0x1c, 0x39, 0x6d, 0x3d, 0x6e, 0xd2, 0x29, 0x45, 0x41, 0x36, 0x1b,
	0x8a, 0x54, 0x96, 0x54, 0x9d, 0x9c, 0x34, 0x10, 0xb8, 0x96, 0x10, 0x91, 0x00, 0x0b, 0x80, 0x6e,
	0xd4, 0xc9, 0x4c, 0x7b, 0x6a, 0x67, 0xda, 0x43, 0xaf, 0xed, 0xe7, 0xe9, 0x25, 0xd3, 0x5e, 0x72,
	0xee, 0xa1, 0xd3, 0x49, 0x2f, 0x39, 0xf4, 0x43, 0x74, 0x76, 0xb1, 0x58, 0x2c, 0x40, 0x90, 0x72,
	0xe2, 0xa6, 0x27, 0x72, 0xdf, 0xbe, 0x7d, 0xfb, 0xde, 0xdb, 0xdf, 0xbe, 0x7d, 0xef, 0x01, 0x2a,
	0xd6, 0xd4, 0xd9, 0x9d, 0xfa, 0x5e, 0xe8, 0xa1, 0x22, 0xfb, 0x31, 0xee, 0x42, 0xad, 0x37, 0x1b,
	0x8f, 0xad, 0xb3, 0x31, 0xe9, 0xb8, 0xe1, 0x0f, 0xdf, 0x47, 0x37, 0xa0, 0xf8, 0xc2, 0x1a, 0xcf,
	0x88, 0xae, 0x6c, 0x2b, 0xf7, 0x54, 0x1c, 0x0d, 0x32, 0x6c, 0x0f, 0xf7, 0xd2, 0x6c, 0xc5, 0x98,
	0xed, 0x0e, 0x54, 0x63, 0xb6, 0x7d, 0xcf, 0x1b, 0xa7, 0xb9, 0xca, 0x31, 0xd7, 0x1f, 0xca, 0xd0,
	0x68, 0xfb, 0xc4, 0x0a, 0xc9, 0x20, 0xf4, 0x89, 0x35, 0xc1, 0xe4, 0x17, 0x33, 0x12, 0x84, 0x48,
	0x87, 0xb5, 0x60, 0x76, 0xf6, 0x19, 0xb1, 0x43, 0xc6, 0x5f, 0xc1, 0xf1, 0x10, 0x21, 0x58, 0x75,
	0xad, 0x09, 0xd1, 0x0b, 0x8c, 0xcc, 0xfe, 0x53, 0xd9, 0xe7, 0xbe, 0x37, 0x9b, 0xea, 0x2a, 0x23,
	0x46, 0x03, 0x74, 0x1f, 0x36, 0x7d, 0x32, 0x1d, 0x3b, 0xb6, 0x15, 0x3a, 0x9e, 0x7b, 0x68, 0xd9,
	0xa1, 0xe7, 0xeb, 0xab, 0x4c, 0xc7, 0xf9, 0x09, 0xb4, 0x05, 0x30, 0xb5, 0xfc, 0xd0, 0xa1, 0xa4,
	0x40, 0x2f, 0x32, 0x36, 0x89, 0x82, 0xf6, 0xa9, 0xb4, 0x90, 0xb8, 0x74, 0x74, 0x64, 0x7d, 0xbe,
	0x7f, 0x15, 0x92, 0x40, 0x2f, 0x6d, 0x2b, 0xf7, 0xd6, 0xf7, 0x6e, 0x44, 0x7e, 0xdc, 0x4d, 0x79,
	0x0f, 0xcf, 0xb3, 0xa3, 0xa7, 0x70, 0x43, 0x26, 0x1e, 0x91, 0x20, 0xb0, 0xce, 0x49, 0xa0, 0xaf,
	0x2d, 0x11, 0x93, 0xbb, 0x02, 0xfd, 0x04, 0x36, 0x64, 0x7a, 0xeb, 0x9c, 0xe8, 0xe5, 0x25, 0x42,
	0xb2, 0xcc, 0x74, 0xbd, 0x3d, 0x26, 0x96, 0x4b, 0xfc, 0x8e, 0x1b, 0x12, 0xff, 0x85, 0x35, 0xd6,
	0x2b, 0xcb, 0xd6, 0x67, 0x98, 0xe9, 0xfa, 0x80, 0x9c, 0x4f, 0x88, 0x1b, 0x0a, 0x5f, 0xc0, 0xb2,
	0xf5, 0x19, 0x66, 0xf4, 0x18, 0x6a, 0x09, 0x89, 0x6a, 0xbf, 0xbe, 0x64, 0x75, 0x9a, 0x95, 0x7a,
	0xd1, 0xf6, 0x26, 0x53, 0xcb, 0xa6, 0x84, 0x27, 0x9e, 0xef, 0xcd, 0x42, 0xc7, 0x25, 0x81, 0x5e,
	0x5d, 0x24, 0xe2, 0xe1, 0x1e, 0xce, 0x5d, 0x81, 0x7e, 0x0c, 0x75, 0x4e, 0x37, 0x5d, 0xca, 0x3b,
	0xd2, 0x6b, 0x4c, 0x46, 0x23, 0x23, 0x83, 0x02, 0x18, 0x67, 0x58, 0xa9, 0x09, 0xd6, 0x2c, 0xf4,
	0x8e, 0xad, 0x59, 0x40, 0x86, 0xce, 0x84, 0xe8, 0xf5, 0x65, 0x26, 0xa4, 0x58, 0xd1, 0xa7, 0xf0,
	0xa6, 0x20, 0x1c, 0x38, 0x01, 0xe3, 0x7b, 0x3e, 0x98, 0x9d, 0x05, 0xb6, 0xef, 0x9c, 0x11, 0x3f,
	0xd0, 0x37, 0x16, 0xeb, 0xb1, 0x7c, 0x25, 0xba, 0x0f, 0xa5, 0x89, 0xe3, 0x76, 0x02, 0x5f, 0xd7,
	0x96, 0xf8, 0x83, 0xf3, 0xa0, 0x67, 0x70, 0xdb, 0x9b, 0x86, 0xce, 0xc4, 0x09, 0x42, 0xc7, 0x6e,
	0x7b, 0xae, 0x3d, 0xf3, 0x7d, 0xe2, 0xda, 0x57, 0x6d, 0xcf, 0x0d, 0x7d, 0x6f, 0xac, 0x6f, 0x2e,
	0xd6, 0x63, 0xe9, 0x42, 0xf4, 0x10, 0x80, 0xb8, 0xb6, 0x7f, 0x35, 0xa5, 0xa0, 0xd3, 0xd1, 0x62,
	0x31, 0x12, 0x9b, 0x71, 0x0b, 0x6e, 0xa4, 0x83, 0x41, 0x30, 0xf5, 0xdc, 0x80, 0x18, 0xff, 0x0f,
	0x8d, 0x03, 0x32, 0x26, 0xd9, 0x20, 0x11, 0x87, 0x02, 0x25, 0x09, 0x05, 0x54, 0x44, 0x9a, 0x95,
	0x8b, 0x78, 0x0e, 0x88, 0xf9, 0xec, 0x5a, 0x09, 0x99, 0x40, 0x50, 0xd8, 0x56, 0x33, 0x81, 0xe0,
	0x36, 0x54, 0x7c, 0x12, 0xcc, 0x26, 0xa4, 0x35, 0x1e, 0xb3, 0x80, 0x53, 0xc6, 0x09, 0xc1, 0xb8,
	0x09, 0x8d, 0xd4, 0x3e, 0x7c, 0xfb, 0xcf, 0x40, 0x1f, 0x90, 0x30, 0x26, 0x5a, 0x23, 0xcf, 0x1d,
	0x5f, 0xbd, 0x8a, 0x12, 0x4d, 0x28, 0xfb, 0x5c, 0x0c, 0xd7, 0x41, 0x8c, 0x8d, 0x37, 0xe0, 0xf5,
	0x9c, 0xbd, 0xb8, 0x22, 0x23, 0x28, 0xb7, 0x3d, 0x97, 0x6a, 0xeb, 0xd3, 0x20, 0xcb, 0x22, 0x65,
	0x67, 0x14, 0x07, 0x59, 0x3e, 0xa4, 0xdb, 0xb3, 0xbf, 0xe6, 0xd4, 0xb3, 0x2f, 0x58, 0xa8, 0x5d,
	0xc5, 0x12, 0x85, 0xce, 0xdb, 0x5c, 0x4a, 0x67, 0xc4, 0xa3, 0xae, 0x44, 0x31, 0xfe, 0xaa, 0x82,
	0x26, 0x40, 0x19, 0xdb, 0x79, 0x0b, 0x4a, 0x01, 0x53, 0x8a, 0xef, 0xc6, 0x47, 0xd4, 0xa1, 0xc2,
	0x32, 0xb6, 0x57, 0x11, 0x27, 0x04, 0x16, 0x29, 0x42, 0xcb, 0x0f, 0x8f, 0xbd, 0x20, 0xe2, 0xa0,
	0xbb, 0xd5, 0x05, 0xac, 0x07, 0xf2, 0x1c, 0x4e, 0xb3, 0xa2, 0x3b, 0xb0, 0xce, 0x08, 0xfd, 0xe7,
	0xcf, 0x03, 0x12, 0xb2, 0xd8, 0xaf, 0xee, 0x17, 0x1e, 0x28, 0x58, 0x26, 0xa3, 0x1d, 0xa8, 0xb3,
	0x21, 0xbd, 0x99, 0x41, 0x68, 0x4d, 0xa6, 0x2c, 0xfa, 0x47, 0x8c, 0x99, 0x19, 0xf4, 0x36, 0xd4,
	0xa9, 0x9f, 0x3b, 0x03, 0x8c, 0xa3, 0x17, 0x84, 0x3d, 0x01, 0x65, 0x9c, 0xa1, 0x52, 0x5b, 0x23,
	0x4c, 0xb0, 0xd8, 0x5e, 0xc6, 0x7c, 0x84, 0x7e, 0x04, 0xd5, 0x20, 0xf4, 0xa6, 0xc2, 0x98, 0x32,
	0x33, 0xa6, 0x21, 0x8c, 0x49, 0xa6, 0x70, 0x8a, 0x11, 0x19, 0x00, 0x74, 0xcc, 0x2d, 0xa9, 0x08,
	0x05, 0x25, 0x2a, 0xba, 0x47, 0x5d, 0xe5, 0x4d, 0x13, 0x3b, 0x40, 0xb0, 0xa5, 0x27, 0xd0, 0xbb,
	0x50, 0x8e, 0x4f, 0x8b, 0x47, 0xde, 0x0d, 0xae, 0x42, 0x0c, 0x0e, 0x2c, 0x18, 0x8c, 0xa7, 0x70,
	0xe3, 0x90, 0x84, 0xf6, 0xc5, 0x11, 0x09, 0xad, 0x91, 0x15, 0x5a, 0xf2, 0x1b, 0xcd, 0x4e, 0x30,
	0xd0, 0x95, 0x6d, 0x95, 0xbd, 0xd1, 0xd1, 0x90, 0x5a, 0xcf, 0xc0, 0x12, 0x21, 0xb7, 0x82, 0xf9,
	0xc8, 0xf8, 0x8b, 0x02, 0x37, 0x33, 0xa2, 0x22, 0x58, 0xa2, 0x77, 0x60, 0xed, 0xcc, 0xf7, 0x2e,
	0x69, 0xe8, 0xa3, 0xb2, 0xd6, 0xf7, 0x6a, 0x5c, 0x9f, 0x7d, 0x46, 0xc5, 0xf1, 0x2c, 0xfa, 0x90,
	0x1e, 0x16, 0xdd, 0x25, 0x16, 0xc1, 0xb6, 0x58, 0xdf, 0xbb, 0x29, 0x5c, 0x28, 0x4f, 0xe2, 0x0c,
	0x33, 0xda, 0x87, 0x1a, 0xd3, 0x45, 0xac, 0x56, 0xd9, 0xea, 0xdb, 0x19, 0xeb, 0x9f, 0xc8, 0x3c,
	0x38, 0xbd, 0xc4, 0x38, 0x81, 0x37, 0x99, 0x11, 0xc7, 0x31, 0x46, 0xb3, 0x8e, 0xf9, 0x4e, 0x40,
	0x37, 0x7e, 0x0e, 0x5b, 0x8b, 0xc4, 0x72, 0x27, 0xbd, 0x0f, 0xe5, 0x49, 0xac, 0xb7, 0xc2, 0x4e,
	0x4d, 0xe7, 0x7a, 0xcf, 0xaf, 0x11, 0x9c, 0xc6, 0x6f, 0x55, 0xa8, 0x1f, 0xcf, 0xce, 0xc6, 0x4e,
	0x70, 0x11, 0x2b, 0xa8, 0x81, 0x7a, 0x49, 0xae, 0x98, 0x8c, 0x2a, 0xa6, 0x7f, 0x93, 0xec, 0xac,
	0xc0, 0x68, 0xd1, 0x40, 0x32, 0x44, 0x5d, 0x6c, 0xc8, 0x6a, 0xf6, 0xc6, 0x7e, 0x00, 0x6b, 0x17,
	0xc4, 0x1a, 0xd1, 0xb3, 0x2c, 0x32, 0xef, 0x1a, 0xb1, 0x96, 0x29, 0x2d, 0x76, 0x9f, 0x46, 0x4c,
	0xa6, 0x1b, 0xfa, 0x57, 0x38, 0x5e, 0x42, 0x23, 0x9b, 0x65, 0x5f, 0x76, 0xdc, 0x33, 0xef, 0x73,
	0x76, 0xb7, 0x2a, 0x58, 0x8c, 0xd1, 0x1d, 0xa8, 0xd9, 0x9e, 0xef, 0x93, 0x31, 0x4b, 0xdc, 0x3a,
	0x23, 0x76, 0xb9, 0x2a, 0x38, 0x4d, 0x44, 0xbb, 0x50, 0xb1, 0xec, 0xcb, 0x63, 0x6f, 0xec, 0xd8,
	0x57, 0xfc, 0x82, 0x69, 0x5c, 0x83, 0x56, 0x4c, 0xc7, 0x09, 0x0b, 0xbd, 0xff, 0xe4, 0xf3, 0x29,
	0xb1, 0x43, 0x32, 0x9a, 0xbb, 0x5e, 0x99, 0x99, 0xe6, 0x63, 0xa8, 0xca, 0x6a, 0xcb, 0x9e, 0xac,
	0x2c, 0xf1, 0xe4, 0xe3, 0xc2, 0x23, 0xc5, 0xf8, 0x87, 0x02, 0x9b, 0xdc, 0x05, 0xad, 0xe0, 0xca,
	0xb5, 0x4d, 0xdf, 0xf7, 0x7c, 0xf4, 0x1e, 0xac, 0xda, 0xde, 0x28, 0x8a, 0xfe, 0xf5, 0xbd, 0x37,
	0xd3, 0xae, 0x4a, 0xf8, 0x76, 0xdb, 0xde, 0x88, 0x60, 0xc6, 0x4a, 0x2f, 0xde, 0x24, 0x4a, 0x04,
	0x79, 0x16, 0x1c, 0x0f, 0x8d, 0x2f, 0x60, 0x95, 0xf2, 0xa1, 0x75, 0x58, 0x3b, 0xe9, 0x7d, 0xd4,
	0xeb, 0x3f, 0xeb, 0x69, 0x2b, 0x68, 0x03, 0xd6, 0xf7, 0x5b, 0x07, 0xa7, 0xd8, 0xfc, 0xf8, 0xc4,
	0x1c, 0x0c, 0x35, 0x05, 0xd5, 0xa0, 0xd2, 0xeb, 0x0f, 0x4f, 0x0f, 0xfb, 0x27, 0xbd, 0x03, 0xad,
	0x80, 0xaa, 0x50, 0xee, 0xf4, 0x86, 0x26, 0xee, 0xb5, 0xba, 0x9a, 0x4a, 0x47, 0xd8, 0x6c, 0x1d,
	0xf4, 0x7b, 0xdd, 0x4f, 0xb5, 0x55, 0x74, 0x03, 0xb4, 0x4e, 0xaf, 0xdd, 0xc7, 0xd8, 0x6c, 0x0f,
	0x4f, 0xfb, 0x87, 0x87, 0x03, 0x73, 0xa8, 0x15, 0xd1, 0x4d, 0xd8, 0x34, 0x7b, 0x6d, 0xfc, 0xe9,
	0xf1, 0xb0, 0xd3, 0xef, 0x9d, 0x1e, 0xb6, 0x3a, 0x5d, 0xf3, 0x40, 0x2b, 0x19, 0x7f, 0x54, 0x60,
	0x43, 0x9c, 0x31, 0xc7, 0xec, 0x6d, 0x50, 0x2d, 0xfb, 0x92, 0xc3, 0x15, 0x92, 0x63, 0xc0, 0x94,
	0x8c, 0x1e, 0x01, 0x58, 0xc2, 0x44, 0x66, 0x8c, 0x84, 0xe9, 0xac, 0x0b, 0xb0, 0xc4, 0x3b, 0x0f,
	0x05, 0x35, 0x07, 0x0a, 0xc6, 0x57, 0x05, 0x78, 0x8d, 0xcb, 0x19, 0x7a, 0x83, 0xa8, 0x82, 0xf8,
	0xb6, 0x97, 0x40, 0x2a, 0x45, 0xd4, 0x74, 0x29, 0x62, 0x26, 0x40, 0x5f, 0x65, 0x40, 0x7f, 0x37,
	0xad, 0x7a, 0x76, 0xcb, 0x97, 0x40, 0x7c, 0xf1, 0x3a, 0xc4, 0x97, 0xae, 0x45, 0xfc, 0xda, 0xb5,
	0x88, 0x7f, 0x25, 0x14, 0x3f, 0x02, 0x7d, 0xde, 0xbc, 0x97, 0x39, 0x6c, 0xe3, 0x37, 0x0a, 0x68,
	0x03, 0x12, 0xb6, 0x67, 0x7e, 0xe0, 0xf9, 0xaf, 0x96, 0x14, 0x34, 0xa1, 0x6c, 0x33, 0x31, 0xe2,
	0xe0, 0xc5, 0x18, 0x35, 0xa1, 0xe4, 0x65, 0xdf, 0x7b, 0x4e, 0x31, 0x1a, 0xb0, 0x29, 0x69, 0x90,
	0xa4, 0x86, 0x2c, 0xf0, 0x7e, 0xcf, 0x8a, 0x19, 0xef, 0x41, 0x23, 0xb5, 0x0f, 0x77, 0x5a, 0xa2,
	0xaf, 0x32, 0xa7, 0xaf, 0x0b, 0xfa, 0xcf, 0x3c, 0xc7, 0x4d, 0x3d, 0x4b, 0xd2, 0xf3, 0xbb, 0x38,
	0x7b, 0x93, 0xb2, 0xb3, 0x42, 0x36, 0x3b, 0x93, 0x1f, 0x6e, 0x35, 0xf5, 0x70, 0x1b, 0xbf, 0x53,
	0xe0, 0xf5, 0x9c, 0x0d, 0xb9, 0xa6, 0xdb, 0xb0, 0x6e, 0x7b, 0x9e, 0x3f, 0x72, 0x5c, 0x8b, 0x96,
	0xd2, 0xd1, 0xae, 0x32, 0x09, 0xe9, 0x50, 0x24, 0x49, 0xca, 0xc8, 0x4c, 0x89, 0x08, 0x68, 0x17,
	0xb4, 0x58, 0x83, 0x80, 0xe6, 0x21, 0xde, 0x2c, 0xba, 0x4e, 0x91, 0xbd, 0x73, 0x73, 0xc6, 0xaf,
	0xe0, 0x4e, 0xe4, 0x2c, 0x59, 0x93, 0x56, 0x10, 0x38, 0xe7, 0x2e, 0x2d, 0x05, 0x83, 0xff, 0x86,
	0x17, 0xb8, 0xae, 0x6a, 0x46, 0x57, 0xe3, 0x88, 0xe6, 0xf0, 0xfc, 0x44, 0x93, 0x2d, 0x17, 0x22,
	0xe2, 0x9a, 0x5c, 0xdd, 0xf8, 0x35, 0xdc, 0xbd, 0xc6, 0x14, 0xee, 0x5f, 0xa1, 0x91, 0x92, 0xf5,
	0xde, 0x07, 0xb0, 0x6e, 0x25, 0x0b, 0x78, 0xca, 0xd3, 0xcc, 0x3e, 0xfe, 0x89, 0x4c, 0x2c, 0xb3,
	0x1b, 0xbf, 0x57, 0xa0, 0x14, 0xe5, 0x51, 0xa8, 0x0e, 0x05, 0x27, 0xf6, 0x54, 0xc1, 0x19, 0xd1,
	0xda, 0xe3, 0xc2, 0x0b, 0xc2, 0xb8, 0x9b, 0x42, 0xff, 0x53, 0xda, 0xd4, 0xf3, 0xa3, 0xe3, 0x29,
	0x62, 0xf6, 0x9f, 0xe6, 0xbd, 0xc2, 0xa2, 0xb6, 0x37, 0x73, 0x43, 0xfe, 0xec, 0x67, 0xa8, 0x14,
	0x22, 0x63, 0x16, 0x59, 0x22, 0xa6, 0xa8, 0x8d, 0x22, 0x93, 0x8c, 0x6f, 0x0a, 0x50, 0x4f, 0x27,
	0x69, 0xb9, 0x05, 0x90, 0x14, 0x75, 0x0b, 0xe9, 0xa8, 0xfb, 0x1e, 0x14, 0x09, 0x7b, 0x2e, 0xa2,
	0x42, 0xe0, 0x8d, 0xdc, 0xc4, 0x6f, 0x37, 0x7a, 0x31, 0x22, 0x4e, 0x64, 0xa6, 0x4e, 0x28, 0x8a,
	0xd5, 0x77, 0xf3, 0xd7, 0x09, 0x67, 0xf2, 0x28, 0x2d, 0x17, 0x5d, 0x0f, 0x60, 0xd3, 0xa6, 0xe5,
	0xa9, 0xe3, 0xb9, 0x79, 0xb5, 0xc2, 0xfc, 0x64, 0xf3, 0x19, 0x6c, 0x64, 0x04, 0xca, 0xb1, 0xb6,
	0x18, 0xc5, 0xda, 0x5d, 0x39, 0xd6, 0x2e, 0xcb, 0xe9, 0xa4, 0x28, 0xfc, 0x7f, 0x50, 0x8c, 0xde,
	0xc1, 0x12, 0x14, 0xfa, 0x1f, 0x69, 0x2b, 0x08, 0x41, 0x9d, 0xbf, 0xf8, 0xa7, 0x83, 0x21, 0x36,
	0x5b, 0x47, 0x9a, 0x62, 0xfc, 0x4d, 0x81, 0x9b, 0xb9, 0x19, 0xed, 0x92, 0x5b, 0xf3, 0x28, 0xf6,
	0x6e, 0x81, 0x79, 0xd7, 0x58, 0x96, 0x18, 0xa7, 0x9d, 0x9c, 0x89, 0x0e, 0xea, 0x92, 0xe8, 0xb0,
	0x9a, 0xbd, 0x71, 0x46, 0xd6, 0x9c, 0x4d, 0xa8, 0xc5, 0xe6, 0x3c, 0xc1, 0xfd, 0x93, 0x63, 0x4d,
	0x31, 0x42, 0xd0, 0x85, 0x4b, 0xcc, 0x17, 0xc4, 0x4d, 0xaa, 0xb2, 0x80, 0xa6, 0x70, 0xcf, 0x1d,
	0x3f, 0x90, 0x4a, 0xb8, 0x24, 0x96, 0x66, 0x66, 0xd0, 0x7d, 0xd8, 0x18, 0x5b, 0x21, 0x91, 0x99,
	0x0b, 0x82, 0x39, 0x3b, 0x65, 0xfc, 0x5b, 0x85, 0xcd, 0xb9, 0x93, 0x90, 0xae, 0x51, 0x91, 0x5d,
	0xa3, 0x5b, 0x50, 0x8a, 0x30, 0xce, 0xc1, 0xca, 0x47, 0x51, 0x99, 0xce, 0x2a, 0xc2, 0x38, 0xd4,
	0x8a, 0x31, 0x05, 0x82, 0x13, 0xf8, 0x0c, 0x8d, 0x15, 0x4c, 0xff, 0xd2, 0xfa, 0xed, 0xc2, 0x39,
	0xbf, 0x78, 0x66, 0x85, 0xc4, 0x9f, 0x58, 0xfe, 0xa5, 0x84, 0xad, 0xf4, 0x04, 0x7a, 0x1b, 0xaa,
	0x2e, 0xf9, 0x25, 0x09, 0xe2, 0xca, 0xb6, 0x24, 0x18, 0x53, 0x74, 0xaa, 0xd7, 0xd4, 0x9a, 0x05,
	0x64, 0x14, 0x97, 0xa1, 0xd1, 0x28, 0xd5, 0x3e, 0x28, 0xa7, 0xdb, 0x07, 0xe8, 0x14, 0x9a, 0x3c,
	0x9d, 0x0c, 0x30, 0xb1, 0x89, 0xf3, 0x82, 0x8c, 0x12, 0x4f, 0xf3, 0x2e, 0xe1, 0x5b, 0x59, 0x8c,
	0x66, 0x0e, 0x04, 0x2f, 0x11, 0x81, 0x3a, 0xb0, 0x31, 0x8d, 0x3b, 0x61, 0x5c, 0x2a, 0xbc, 0x9c,
	0xd4, 0xec, 0x3a, 0xd4, 0x07, 0x14, 0xeb, 0x2d, 0x49, 0x5b, 0x7f, 0x39, 0x69, 0x39, 0x4b, 0x8d,
	0x2f, 0x55, 0x58, 0xe3, 0x4d, 0xd6, 0x65, 0x0f, 0x73, 0x7c, 0x8b, 0x0b, 0x39, 0xc9, 0xa3, 0x2a,
	0x27, 0x8f, 0xdb, 0x50, 0x09, 0x05, 0xcc, 0x92, 0x7c, 0x24, 0x21, 0x4a, 0xaf, 0x4a, 0x71, 0x71,
	0x9e, 0x51, 0xca, 0xe6, 0x19, 0x52, 0x78, 0x5c, 0x4b, 0x87, 0x47, 0x03, 0xaa, 0x14, 0x62, 0x57,
	0x3c, 0x37, 0x63, 0xc7, 0x5b, 0xc1, 0x29, 0x1a, 0xfa, 0x41, 0x92, 0xb8, 0x56, 0x58, 0x30, 0x8c,
	0x83, 0x28, 0x37, 0xfd, 0x25, 0x12, 0x55, 0xb8, 0x2e, 0x51, 0x5d, 0xbf, 0x36, 0x51, 0xad, 0x7e,
	0xbf, 0x89, 0xea, 0xdf, 0x55, 0x50, 0x5b, 0xf6, 0xe5, 0xc2, 0x67, 0x7b, 0x07, 0x34, 0xe1, 0xcf,
	0x41, 0xea, 0xa9, 0x99, 0xa3, 0xd3, 0x27, 0x7e, 0x12, 0x9c, 0x0f, 0x52, 0x65, 0x80, 0x44, 0x59,
	0x96, 0x73, 0xfe, 0xef, 0xd3, 0x7b, 0xb4, 0x47, 0x6f, 0x85, 0x4d, 0xa6, 0xe9, 0x87, 0xaa, 0x2c,
	0x34, 0xcb, 0x99, 0xa5, 0x51, 0xd1, 0xf6, 0x26, 0x13, 0x47, 0x8a, 0x8a, 0x49, 0x15, 0x9c, 0x9d,
	0x42, 0xf7, 0x99, 0x4d, 0x51, 0xd5, 0x06, 0x59, 0x85, 0xf8, 0xb3, 0x20, 0x38, 0x8c, 0x8f, 0xb3,
	0xd1, 0x5d, 0x2a, 0x4f, 0x95, 0xdc, 0x12, 0xb3, 0x40, 0x6b, 0xd4, 0x61, 0xbf, 0x7f, 0xda, 0x6d,
	0xe1, 0x27, 0xa6, 0xa6, 0xa2, 0x3a, 0x40, 0x52, 0x71, 0x6a, 0xab, 0xc6, 0x53, 0xa8, 0xcb, 0x9d,
	0xe2, 0xfe, 0xf4, 0x3b, 0x67, 0x67, 0xf7, 0xa0, 0x2e, 0x37, 0x8c, 0x17, 0x4b, 0x32, 0x08, 0xd4,
	0xa4, 0xd6, 0xee, 0x77, 0xdf, 0xf2, 0x9a, 0x0e, 0xf2, 0x53, 0xa8, 0x63, 0x36, 0x78, 0x65, 0xd3,
	0x1c, 0x68, 0xcc, 0x35, 0x82, 0x5f, 0x41, 0xed, 0x65, 0x3d, 0xe7, 0x3f, 0xab, 0xd0, 0x68, 0xd9,
	0xa1, 0xf3, 0xc2, 0x09, 0xaf, 0xa2, 0x0d, 0x59, 0xb4, 0x45, 0x48, 0x3c, 0x94, 0xd1, 0x7b, 0x4f,
	0x1f, 0xcb, 0x77, 0xa0, 0xe0, 0x4d, 0x79, 0x7e, 0xf1, 0x9a, 0x80, 0x8d, 0xbc, 0xb6, 0x3f, 0xc5,
	0x05, 0x6f, 0x8a, 0x3e, 0x84, 0xba, 0x9d, 0x3a, 0x64, 0xb6, 0x6d, 0xd2, 0xeb, 0x4b, 0x23, 0x00,
	0x67, 0x98, 0xe9, 0xf2, 0x51, 0xea, 0x64, 0xd9, 0xe5, 0x4c, 0x96, 0xa7, 0x8f, 0x1d, 0x67, 0x98,
	0xd1, 0x63, 0xa8, 0x4d, 0xe5, 0xe3, 0x66, 0x97, 0x37, 0xf9, 0x9e, 0x92, 0x82, 0x02, 0x4e, 0xb3,
	0xd2, 0xad, 0xfd, 0xd4, 0x19, 0xf2, 0x2f, 0x85, 0xf1, 0xd6, 0xe9, 0x03, 0xc6, 0x19, 0x66, 0xd4,
	0x85, 0x46, 0x30, 0x7f, 0x70, 0xfc, 0x33, 0x61, 0x9c, 0xf6, 0xe7, 0x1c, 0x2d, 0xce, 0x5b, 0xb6,
	0x83, 0xa1, 0x96, 0xea, 0x92, 0xa3, 0x2a, 0x94, 0x7b, 0xe6, 0xb3, 0x53, 0xd6, 0xe2, 0x59, 0x41,
	0x00, 0x25, 0x7e, 0xeb, 0x14, 0x3a, 0x63, 0xb6, 0x70, 0xb7, 0x63, 0x0e, 0xe8, 0x1d, 0x04, 0x28,
	0x75, 0x5b, 0x43, 0xfa, 0x5f, 0x65, 0xf7, 0xb1, 0x73, 0x64, 0x0e, 0x86, 0xad, 0xa3, 0x63, 0x6d,
	0x75, 0xe7, 0x13, 0xa8, 0xca, 0xcd, 0x6a, 0x9a, 0x7e, 0x0e, 0x86, 0xfd, 0xe3, 0xd3, 0x7e, 0xef,
	0xb4, 0xdd, 0xea, 0xb5, 0xcd, 0x6e, 0xd4, 0x77, 0x8a, 0x68, 0xb1, 0xf4, 0x98, 0xc0, 0x85, 0x16,
	0xc4, 0xaa, 0x44, 0xb2, 0xba, 0xb3, 0x03, 0x15, 0x11, 0xd4, 0x98, 0x06, 0x66, 0xeb, 0xc0, 0xc4,
	0xda, 0x0a, 0x5a, 0x03, 0xb5, 0xd5, 0xed, 0x6a, 0x0a, 0x2a, 0xc3, 0x6a, 0xaf, 0xdf, 0x33, 0xb5,
	0xc2, 0xce, 0x0b, 0xd0, 0xb2, 0xc0, 0xa1, 0x99, 0x63, 0x1b, 0x9b, 0xad, 0xa1, 0x19, 0xe7, 0xc1,
	0x2c, 0x99, 0x3c, 0x30, 0xbb, 0x66, 0x42, 0x52, 0x90, 0x06, 0xd5, 0xe3, 0xd6, 0xc9, 0x40, 0x50,
	0x0a, 0x94, 0x09, 0x9b, 0x83, 0x93, 0x23, 0x41, 0x52, 0xd1, 0x6b, 0xd0, 0x18, 0x98, 0x43, 0x3e,
	0x3e, 0x4d, 0xba, 0x62, 0x7b, 0xdf, 0x94, 0x41, 0x6d, 0x1d, 0x77, 0x50, 0x07, 0xaa, 0x32, 0x06,
	0x51, 0x33, 0x07, 0x98, 0xbc, 0x50, 0x6d, 0xbe, 0x91, 0x3b, 0xc7, 0x5b, 0x10, 0x2b, 0x54, 0x94,
	0x8c, 0x47, 0x21, 0x2a, 0xe7, 0xbb, 0x97, 0x10, 0x95, 0xfb, 0xa1, 0x6b, 0x05, 0x1d, 0xc2, 0xba,
	0x04, 0x4e, 0xf4, 0xfa, 0x3c, 0x60, 0x63, 0x41, 0xcd, 0xbc, 0x29, 0x21, 0xe7, 0x13, 0xd6, 0x2c,
	0x49, 0xc3, 0x09, 0xbd, 0xb5, 0x08, 0x7d, 0xb1, 0xcc, 0xed, 0xc5, 0x0c, 0x42, 0xf2, 0x23, 0xa8,
	0x88, 0xaf, 0x43, 0x28, 0x0e, 0x01, 0xd9, 0xef, 0x45, 0xcd, 0x7a, 0x3a, 0x29, 0x31, 0x56, 0x1e,
	0x28, 0xa8, 0x0b, 0xb5, 0xd4, 0x07, 0x04, 0x14, 0xfb, 0x22, 0xef, 0x0b, 0x45, 0xf3, 0x76, 0xfe,
	0xa4, 0xd0, 0xe3, 0x1c, 0x6e, 0xe5, 0xb7, 0xdc, 0xd1, 0x1d, 0x79, 0xe5, 0xa2, 0x46, 0x7f, 0xf3,
	0xee, 0x35, 0x5c, 0x62, 0xa3, 0xc7, 0xb0, 0xc6, 0x9b, 0x66, 0xe8, 0x66, 0x6e, 0x33, 0xbc, 0x79,
	0x2b, 0x4b, 0x16, 0x6b, 0xdb, 0x50, 0x95, 0x5b, 0xa1, 0xdf, 0x5a, 0xc0, 0x3d, 0xe5, 0x81, 0x82,
	0x4e, 0x40, 0xcb, 0x76, 0xed, 0xd0, 0xd6, 0xf2, 0x6e, 0x65, 0xf3, 0xad, 0x85, 0xf3, 0x42, 0xb7,
	0x9f, 0x42, 0x45, 0xf4, 0xd3, 0x92, 0x83, 0xcc, 0xf4, 0xf8, 0x9a, 0xfa, 0xfc, 0x84, 0x0c, 0x56,
	0xa9, 0x29, 0x26, 0xc0, 0x3a, 0xdf, 0x90, 0x13, 0x60, 0xcd, 0xe9, 0xa1, 0x45, 0x60, 0x9d, 0x6b,
	0x5c, 0x09, 0xb0, 0x2e, 0xea, 0xa1, 0x09, 0xb0, 0x2e, 0xec, 0x79, 0x19, 0x2b, 0xe8, 0x0b, 0xfe,
	0xb9, 0x67, 0x51, 0xfb, 0x06, 0xbd, 0x9b, 0x52, 0x6c, 0x79, 0xbf, 0xaa, 0x79, 0xff, 0xe5, 0x98,
	0xe3, 0xdd, 0xf7, 0xef, 0x7e, 0xf9, 0xf5, 0x96, 0xf2, 0xd5, 0xd7, 0x5b, 0xca, 0x3f, 0xbf, 0xde,
	0x52, 0xfe, 0xf4, 0xaf, 0xad, 0x15, 0x68, 0x38, 0xde, 0xee, 0xd8, 0x79, 0x1e, 0x9e, 0xf9, 0xce,
	0xe8, 0x9c, 0x44, 0xe2, 0xce, 0x4a, 0xec, 0xe7, 0xe1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0xe3, 0xf8, 0xc7, 0xd6, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// CreateStream creates a new stream attached to a NATS subject. It returns
	// an AlreadyExists status code if a stream with the given subject and name
	// already exists.
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	// DeleteStream deletes a stream.
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error)
	// PauseStream pauses a stream's partitions. If no partitions are
	// specified, all of the stream's partitions will be paused. Partitions are
	// resumed when they are published to via the Liftbridge Publish API.
	PauseStream(ctx context.Context, in *PauseStreamRequest, opts ...grpc.CallOption) (*PauseStreamResponse, error)
	// SetStreamReadonly sets a read-only flag to a partition. Returns a
	// NoSuchStream error code if the given stream or partition does not exist.
	SetStreamReadonly(ctx context.Context, in *SetStreamReadonlyRequest, opts ...grpc.CallOption) (*SetStreamReadonlyResponse, error)
	// Subscribe creates an ephemeral subscription for the given stream. It
	// begins to receive messages starting at the given offset and waits for
	// new messages when it reaches the end of the stream. Use the request
	// context to close the subscription.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error)
	// FetchMetadata retrieves the latest cluster metadata, including stream
	// broker information.
	FetchMetadata(ctx context.Context, in *FetchMetadataRequest, opts ...grpc.CallOption) (*FetchMetadataResponse, error)
	// FetchPartitionMetadata retrieves the latest partition metadata from partition leader
	// The main interest is to retrieve Highest Watermark and Newest Offset
	FetchPartitionMetadata(ctx context.Context, in *FetchPartitionMetadataRequest, opts ...grpc.CallOption) (*FetchPartitionMetadataResponse, error)
	// Publish a new message to a stream. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the ack is
	// received. If the ack is not received in time, a DeadlineExceeded status
	// code is returned.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// PublishAsync is used to asynchronously publish messages to a stream in a
	// pipelined fashion. This returns a stream which will yield
	// PublishResponses for messages whose AckPolicy is not NONE.
	PublishAsync(ctx context.Context, opts ...grpc.CallOption) (API_PublishAsyncClient, error)
	// Publish a Liftbridge message to a NATS subject. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the first ack
	// is received. If an ack is not received in time, a DeadlineExceeded
	// status code is returned.
	PublishToSubject(ctx context.Context, in *PublishToSubjectRequest, opts ...grpc.CallOption) (*PublishToSubjectResponse, error)
	// SetCursor stores a cursor position for a particular stream partition
	// which is uniquely identified by an opaque string.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	SetCursor(ctx context.Context, in *SetCursorRequest, opts ...grpc.CallOption) (*SetCursorResponse, error)
	// FetchCursor retrieves a partition cursor position.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	FetchCursor(ctx context.Context, in *FetchCursorRequest, opts ...grpc.CallOption) (*FetchCursorResponse, error)
	// JoinConsumerGroup adds a consumer to a consumer group. If the group does
	// not exist, it will create it first.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	JoinConsumerGroup(ctx context.Context, in *JoinConsumerGroupRequest, opts ...grpc.CallOption) (*JoinConsumerGroupResponse, error)
	// FetchConsumerGroupAssignments retrieves the partition assignments for a
	// consumer. This also acts as a heartbeat for the consumer so that the
	// coordinator keeps the consumer active in the group.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	FetchConsumerGroupAssignments(ctx context.Context, in *FetchConsumerGroupAssignmentsRequest, opts ...grpc.CallOption) (*FetchConsumerGroupAssignmentsResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamResponse, error) {
	out := new(DeleteStreamResponse)
	err := c.cc.Invoke(ctx, "/proto.API/DeleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PauseStream(ctx context.Context, in *PauseStreamRequest, opts ...grpc.CallOption) (*PauseStreamResponse, error) {
	out := new(PauseStreamResponse)
	err := c.cc.Invoke(ctx, "/proto.API/PauseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetStreamReadonly(ctx context.Context, in *SetStreamReadonlyRequest, opts ...grpc.CallOption) (*SetStreamReadonlyResponse, error) {
	out := new(SetStreamReadonlyResponse)
	err := c.cc.Invoke(ctx, "/proto.API/SetStreamReadonly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/proto.API/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type aPISubscribeClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) FetchMetadata(ctx context.Context, in *FetchMetadataRequest, opts ...grpc.CallOption) (*FetchMetadataResponse, error) {
	out := new(FetchMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.API/FetchMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchPartitionMetadata(ctx context.Context, in *FetchPartitionMetadataRequest, opts ...grpc.CallOption) (*FetchPartitionMetadataResponse, error) {
	out := new(FetchPartitionMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.API/FetchPartitionMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/proto.API/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PublishAsync(ctx context.Context, opts ...grpc.CallOption) (API_PublishAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/proto.API/PublishAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPublishAsyncClient{stream}
	return x, nil
}

type API_PublishAsyncClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type aPIPublishAsyncClient struct {
	grpc.ClientStream
}

func (x *aPIPublishAsyncClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPublishAsyncClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) PublishToSubject(ctx context.Context, in *PublishToSubjectRequest, opts ...grpc.CallOption) (*PublishToSubjectResponse, error) {
	out := new(PublishToSubjectResponse)
	err := c.cc.Invoke(ctx, "/proto.API/PublishToSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetCursor(ctx context.Context, in *SetCursorRequest, opts ...grpc.CallOption) (*SetCursorResponse, error) {
	out := new(SetCursorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/SetCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchCursor(ctx context.Context, in *FetchCursorRequest, opts ...grpc.CallOption) (*FetchCursorResponse, error) {
	out := new(FetchCursorResponse)
	err := c.cc.Invoke(ctx, "/proto.API/FetchCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) JoinConsumerGroup(ctx context.Context, in *JoinConsumerGroupRequest, opts ...grpc.CallOption) (*JoinConsumerGroupResponse, error) {
	out := new(JoinConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/proto.API/JoinConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FetchConsumerGroupAssignments(ctx context.Context, in *FetchConsumerGroupAssignmentsRequest, opts ...grpc.CallOption) (*FetchConsumerGroupAssignmentsResponse, error) {
	out := new(FetchConsumerGroupAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/FetchConsumerGroupAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// CreateStream creates a new stream attached to a NATS subject. It returns
	// an AlreadyExists status code if a stream with the given subject and name
	// already exists.
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	// DeleteStream deletes a stream.
	DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamResponse, error)
	// PauseStream pauses a stream's partitions. If no partitions are
	// specified, all of the stream's partitions will be paused. Partitions are
	// resumed when they are published to via the Liftbridge Publish API.
	PauseStream(context.Context, *PauseStreamRequest) (*PauseStreamResponse, error)
	// SetStreamReadonly sets a read-only flag to a partition. Returns a
	// NoSuchStream error code if the given stream or partition does not exist.
	SetStreamReadonly(context.Context, *SetStreamReadonlyRequest) (*SetStreamReadonlyResponse, error)
	// Subscribe creates an ephemeral subscription for the given stream. It
	// begins to receive messages starting at the given offset and waits for
	// new messages when it reaches the end of the stream. Use the request
	// context to close the subscription.
	Subscribe(*SubscribeRequest, API_SubscribeServer) error
	// FetchMetadata retrieves the latest cluster metadata, including stream
	// broker information.
	FetchMetadata(context.Context, *FetchMetadataRequest) (*FetchMetadataResponse, error)
	// FetchPartitionMetadata retrieves the latest partition metadata from partition leader
	// The main interest is to retrieve Highest Watermark and Newest Offset
	FetchPartitionMetadata(context.Context, *FetchPartitionMetadataRequest) (*FetchPartitionMetadataResponse, error)
	// Publish a new message to a stream. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the ack is
	// received. If the ack is not received in time, a DeadlineExceeded status
	// code is returned.
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// PublishAsync is used to asynchronously publish messages to a stream in a
	// pipelined fashion. This returns a stream which will yield
	// PublishResponses for messages whose AckPolicy is not NONE.
	PublishAsync(API_PublishAsyncServer) error
	// Publish a Liftbridge message to a NATS subject. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the first ack
	// is received. If an ack is not received in time, a DeadlineExceeded
	// status code is returned.
	PublishToSubject(context.Context, *PublishToSubjectRequest) (*PublishToSubjectResponse, error)
	// SetCursor stores a cursor position for a particular stream partition
	// which is uniquely identified by an opaque string.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	SetCursor(context.Context, *SetCursorRequest) (*SetCursorResponse, error)
	// FetchCursor retrieves a partition cursor position.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	FetchCursor(context.Context, *FetchCursorRequest) (*FetchCursorResponse, error)
	// JoinConsumerGroup adds a consumer to a consumer group. If the group does
	// not exist, it will create it first.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	JoinConsumerGroup(context.Context, *JoinConsumerGroupRequest) (*JoinConsumerGroupResponse, error)
	// FetchConsumerGroupAssignments retrieves the partition assignments for a
	// consumer. This also acts as a heartbeat for the consumer so that the
	// coordinator keeps the consumer active in the group.
	//
	// NOTE: This is a beta endpoint and is subject to change. It is not
	// included as part of Liftbridge's semantic versioning scheme.
	FetchConsumerGroupAssignments(context.Context, *FetchConsumerGroupAssignmentsRequest) (*FetchConsumerGroupAssignmentsResponse, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) CreateStream(ctx context.Context, req *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedAPIServer) DeleteStream(ctx context.Context, req *DeleteStreamRequest) (*DeleteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (*UnimplementedAPIServer) PauseStream(ctx context.Context, req *PauseStreamRequest) (*PauseStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseStream not implemented")
}
func (*UnimplementedAPIServer) SetStreamReadonly(ctx context.Context, req *SetStreamReadonlyRequest) (*SetStreamReadonlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamReadonly not implemented")
}
func (*UnimplementedAPIServer) Subscribe(req *SubscribeRequest, srv API_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedAPIServer) FetchMetadata(ctx context.Context, req *FetchMetadataRequest) (*FetchMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMetadata not implemented")
}
func (*UnimplementedAPIServer) FetchPartitionMetadata(ctx context.Context, req *FetchPartitionMetadataRequest) (*FetchPartitionMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPartitionMetadata not implemented")
}
func (*UnimplementedAPIServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedAPIServer) PublishAsync(srv API_PublishAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishAsync not implemented")
}
func (*UnimplementedAPIServer) PublishToSubject(ctx context.Context, req *PublishToSubjectRequest) (*PublishToSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishToSubject not implemented")
}
func (*UnimplementedAPIServer) SetCursor(ctx context.Context, req *SetCursorRequest) (*SetCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCursor not implemented")
}
func (*UnimplementedAPIServer) FetchCursor(ctx context.Context, req *FetchCursorRequest) (*FetchCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCursor not implemented")
}
func (*UnimplementedAPIServer) JoinConsumerGroup(ctx context.Context, req *JoinConsumerGroupRequest) (*JoinConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConsumerGroup not implemented")
}
func (*UnimplementedAPIServer) FetchConsumerGroupAssignments(ctx context.Context, req *FetchConsumerGroupAssignmentsRequest) (*FetchConsumerGroupAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConsumerGroupAssignments not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/DeleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PauseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PauseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/PauseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PauseStream(ctx, req.(*PauseStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetStreamReadonly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamReadonlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetStreamReadonly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetStreamReadonly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetStreamReadonly(ctx, req.(*SetStreamReadonlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Subscribe(m, &aPISubscribeServer{stream})
}

type API_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type aPISubscribeServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _API_FetchMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FetchMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchMetadata(ctx, req.(*FetchMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchPartitionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPartitionMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchPartitionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FetchPartitionMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchPartitionMetadata(ctx, req.(*FetchPartitionMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PublishAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).PublishAsync(&aPIPublishAsyncServer{stream})
}

type API_PublishAsyncServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type aPIPublishAsyncServer struct {
	grpc.ServerStream
}

func (x *aPIPublishAsyncServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPublishAsyncServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_PublishToSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishToSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PublishToSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/PublishToSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PublishToSubject(ctx, req.(*PublishToSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetCursor(ctx, req.(*SetCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FetchCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchCursor(ctx, req.(*FetchCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_JoinConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).JoinConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/JoinConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).JoinConsumerGroup(ctx, req.(*JoinConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FetchConsumerGroupAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchConsumerGroupAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchConsumerGroupAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FetchConsumerGroupAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchConsumerGroupAssignments(ctx, req.(*FetchConsumerGroupAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _API_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _API_DeleteStream_Handler,
		},
		{
			MethodName: "PauseStream",
			Handler:    _API_PauseStream_Handler,
		},
		{
			MethodName: "SetStreamReadonly",
			Handler:    _API_SetStreamReadonly_Handler,
		},
		{
			MethodName: "FetchMetadata",
			Handler:    _API_FetchMetadata_Handler,
		},
		{
			MethodName: "FetchPartitionMetadata",
			Handler:    _API_FetchPartitionMetadata_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _API_Publish_Handler,
		},
		{
			MethodName: "PublishToSubject",
			Handler:    _API_PublishToSubject_Handler,
		},
		{
			MethodName: "SetCursor",
			Handler:    _API_SetCursor_Handler,
		},
		{
			MethodName: "FetchCursor",
			Handler:    _API_FetchCursor_Handler,
		},
		{
			MethodName: "JoinConsumerGroup",
			Handler:    _API_JoinConsumerGroup_Handler,
		},
		{
			MethodName: "FetchConsumerGroupAssignments",
			Handler:    _API_FetchConsumerGroupAssignments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _API_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishAsync",
			Handler:       _API_PublishAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func (m *NullableInt64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullableInt64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullableInt64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullableInt32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullableInt32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullableInt32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullableBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullableBool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullableBool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Encryption != nil {
		{
			size, err := m.Encryption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.OptimisticConcurrencyControl != nil {
		{
			size, err := m.OptimisticConcurrencyControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.MinIsr != nil {
		{
			size, err := m.MinIsr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.AutoPauseDisableIfSubscribers != nil {
		{
			size, err := m.AutoPauseDisableIfSubscribers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.AutoPauseTime != nil {
		{
			size, err := m.AutoPauseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.CompactEnabled != nil {
		{
			size, err := m.CompactEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CompactMaxGoroutines != nil {
		{
			size, err := m.CompactMaxGoroutines.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SegmentMaxAge != nil {
		{
			size, err := m.SegmentMaxAge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SegmentMaxBytes != nil {
		{
			size, err := m.SegmentMaxBytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CleanerInterval != nil {
		{
			size, err := m.CleanerInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RetentionMaxAge != nil {
		{
			size, err := m.RetentionMaxAge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.RetentionMaxMessages != nil {
		{
			size, err := m.RetentionMaxMessages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RetentionMaxBytes != nil {
		{
			size, err := m.RetentionMaxBytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Partitions != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partitions))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PauseStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResumeAll {
		i--
		if m.ResumeAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partitions) > 0 {
		dAtA15 := make([]byte, len(m.Partitions)*10)
		var j14 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintApi(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SetStreamReadonlyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStreamReadonlyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStreamReadonlyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Readonly {
		i--
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partitions) > 0 {
		dAtA17 := make([]byte, len(m.Partitions)*10)
		var j16 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintApi(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetStreamReadonlyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStreamReadonlyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStreamReadonlyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Consumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consumer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consumer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupEpoch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupEpoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Consumer != nil {
		{
			size, err := m.Consumer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StopTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StopTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.StopOffset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StopOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.StopPosition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StopPosition))
		i--
		dAtA[i] = 0x40
	}
	if m.Resume {
		i--
		if m.Resume {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ReadISRReplica {
		i--
		if m.ReadISRReplica {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StartTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.StartOffset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.StartPosition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x18
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Streams[iNdEx])
			copy(dAtA[i:], m.Streams[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Streams[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FetchMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupMetadata) > 0 {
		for iNdEx := len(m.GroupMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StreamMetadata) > 0 {
		for iNdEx := len(m.StreamMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Brokers) > 0 {
		for iNdEx := len(m.Brokers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Brokers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FetchPartitionMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchPartitionMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchPartitionMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchPartitionMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchPartitionMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchPartitionMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpectedOffset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpectedOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.AckPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckPolicy))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AckInbox) > 0 {
		i -= len(m.AckInbox)
		copy(dAtA[i:], m.AckInbox)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AckInbox)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintApi(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishAsyncError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishAsyncError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishAsyncError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AsyncError != nil {
		{
			size, err := m.AsyncError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishToSubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishToSubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishToSubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckPolicy))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckInbox) > 0 {
		i -= len(m.AckInbox)
		copy(dAtA[i:], m.AckInbox)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AckInbox)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintApi(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishToSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishToSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishToSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetCursorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCursorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCursorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CursorId) > 0 {
		i -= len(m.CursorId)
		copy(dAtA[i:], m.CursorId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetCursorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCursorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCursorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FetchCursorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCursorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchCursorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CursorId) > 0 {
		i -= len(m.CursorId)
		copy(dAtA[i:], m.CursorId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchCursorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchCursorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchCursorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JoinConsumerGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinConsumerGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinConsumerGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Streams[iNdEx])
			copy(dAtA[i:], m.Streams[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Streams[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinConsumerGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinConsumerGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinConsumerGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConsumersTimeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConsumersTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.Epoch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Coordinator) > 0 {
		i -= len(m.Coordinator)
		copy(dAtA[i:], m.Coordinator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Coordinator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConsumerGroupAssignmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConsumerGroupAssignmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConsumerGroupAssignmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsumerId) > 0 {
		i -= len(m.ConsumerId)
		copy(dAtA[i:], m.ConsumerId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConsumerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Partitions) > 0 {
		dAtA24 := make([]byte, len(m.Partitions)*10)
		var j23 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintApi(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchConsumerGroupAssignmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchConsumerGroupAssignmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchConsumerGroupAssignmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Broker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Broker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Broker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaderCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeaderCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PartitionCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Port != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreationTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreationTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Partitions) > 0 {
		for k := range m.Partitions {
			v := m.Partitions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Error != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerGroupMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerGroupMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerGroupMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Coordinator) > 0 {
		i -= len(m.Coordinator)
		copy(dAtA[i:], m.Coordinator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Coordinator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Error != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionEventTimestamps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionEventTimestamps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionEventTimestamps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LatestTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LatestTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.FirstTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FirstTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartitionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadonlyTimestamps != nil {
		{
			size, err := m.ReadonlyTimestamps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.PauseTimestamps != nil {
		{
			size, err := m.PauseTimestamps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MessagesReceivedTimestamps != nil {
		{
			size, err := m.MessagesReceivedTimestamps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Readonly {
		i--
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.NewestOffset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NewestOffset))
		i--
		dAtA[i] = 0x30
	}
	if m.HighWatermark != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HighWatermark))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Isr) > 0 {
		for iNdEx := len(m.Isr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Isr[iNdEx])
			copy(dAtA[i:], m.Isr[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Isr[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Replicas) > 0 {
		for iNdEx := len(m.Replicas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Replicas[iNdEx])
			copy(dAtA[i:], m.Replicas[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Replicas[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckPolicy))
		i--
		dAtA[i] = 0x60
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AckInbox) > 0 {
		i -= len(m.AckInbox)
		copy(dAtA[i:], m.AckInbox)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AckInbox)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintApi(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ReplySubject) > 0 {
		i -= len(m.ReplySubject)
		copy(dAtA[i:], m.ReplySubject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReplySubject)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Partition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckError != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckError))
		i--
		dAtA[i] = 0x50
	}
	if m.CommitTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CommitTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.ReceptionTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReceptionTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.AckPolicy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckPolicy))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckInbox) > 0 {
		i -= len(m.AckInbox)
		copy(dAtA[i:], m.AckInbox)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AckInbox)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MsgSubject) > 0 {
		i -= len(m.MsgSubject)
		copy(dAtA[i:], m.MsgSubject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MsgSubject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PartitionSubject) > 0 {
		i -= len(m.PartitionSubject)
		copy(dAtA[i:], m.PartitionSubject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PartitionSubject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateStreamOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStreamOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStreamOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Partitions) > 0 {
		dAtA30 := make([]byte, len(m.Partitions)*10)
		var j29 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		i -= j29
		copy(dAtA[i:], dAtA30[:j29])
		i = encodeVarintApi(dAtA, i, uint64(j29))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStreamOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStreamOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStreamOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseStreamOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseStreamOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseStreamOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResumeAll {
		i--
		if m.ResumeAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partitions) > 0 {
		dAtA32 := make([]byte, len(m.Partitions)*10)
		var j31 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintApi(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResumeStreamOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeStreamOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResumeStreamOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Partitions) > 0 {
		dAtA34 := make([]byte, len(m.Partitions)*10)
		var j33 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintApi(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetStreamReadonlyOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStreamReadonlyOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStreamReadonlyOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Readonly {
		i--
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Partitions) > 0 {
		dAtA36 := make([]byte, len(m.Partitions)*10)
		var j35 int
		for _, num1 := range m.Partitions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintApi(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stream) > 0 {
		i -= len(m.Stream)
		copy(dAtA[i:], m.Stream)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityStreamEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityStreamEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityStreamEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SetStreamReadonlyOp != nil {
		{
			size, err := m.SetStreamReadonlyOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ResumeStreamOp != nil {
		{
			size, err := m.ResumeStreamOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PauseStreamOp != nil {
		{
			size, err := m.PauseStreamOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DeleteStreamOp != nil {
		{
			size, err := m.DeleteStreamOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreateStreamOp != nil {
		{
			size, err := m.CreateStreamOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NullableInt64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NullableInt32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NullableBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovApi(uint64(m.ReplicationFactor))
	}
	if m.Partitions != 0 {
		n += 1 + sovApi(uint64(m.Partitions))
	}
	if m.RetentionMaxBytes != nil {
		l = m.RetentionMaxBytes.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetentionMaxMessages != nil {
		l = m.RetentionMaxMessages.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetentionMaxAge != nil {
		l = m.RetentionMaxAge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CleanerInterval != nil {
		l = m.CleanerInterval.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SegmentMaxBytes != nil {
		l = m.SegmentMaxBytes.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SegmentMaxAge != nil {
		l = m.SegmentMaxAge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CompactMaxGoroutines != nil {
		l = m.CompactMaxGoroutines.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CompactEnabled != nil {
		l = m.CompactEnabled.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AutoPauseTime != nil {
		l = m.AutoPauseTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AutoPauseDisableIfSubscribers != nil {
		l = m.AutoPauseDisableIfSubscribers.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MinIsr != nil {
		l = m.MinIsr.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.OptimisticConcurrencyControl != nil {
		l = m.OptimisticConcurrencyControl.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Encryption != nil {
		l = m.Encryption.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PauseStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.ResumeAll {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PauseStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStreamReadonlyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Readonly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStreamReadonlyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Consumer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GroupEpoch != 0 {
		n += 1 + sovApi(uint64(m.GroupEpoch))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	if m.StartPosition != 0 {
		n += 1 + sovApi(uint64(m.StartPosition))
	}
	if m.StartOffset != 0 {
		n += 1 + sovApi(uint64(m.StartOffset))
	}
	if m.StartTimestamp != 0 {
		n += 1 + sovApi(uint64(m.StartTimestamp))
	}
	if m.ReadISRReplica {
		n += 2
	}
	if m.Resume {
		n += 2
	}
	if m.StopPosition != 0 {
		n += 1 + sovApi(uint64(m.StopPosition))
	}
	if m.StopOffset != 0 {
		n += 1 + sovApi(uint64(m.StopOffset))
	}
	if m.StopTimestamp != 0 {
		n += 1 + sovApi(uint64(m.StopTimestamp))
	}
	if m.Consumer != nil {
		l = m.Consumer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, s := range m.Streams {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brokers) > 0 {
		for _, e := range m.Brokers {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.StreamMetadata) > 0 {
		for _, e := range m.StreamMetadata {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.GroupMetadata) > 0 {
		for _, e := range m.GroupMetadata {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchPartitionMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchPartitionMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovApi(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.AckInbox)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AckPolicy != 0 {
		n += 1 + sovApi(uint64(m.AckPolicy))
	}
	if m.ExpectedOffset != 0 {
		n += 1 + sovApi(uint64(m.ExpectedOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishAsyncError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AsyncError != nil {
		l = m.AsyncError.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishToSubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovApi(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.AckInbox)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AckPolicy != 0 {
		n += 1 + sovApi(uint64(m.AckPolicy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishToSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCursorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	l = len(m.CursorId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCursorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchCursorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	l = len(m.CursorId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchCursorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinConsumerGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Streams) > 0 {
		for _, s := range m.Streams {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinConsumerGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Coordinator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovApi(uint64(m.Epoch))
	}
	if m.ConsumersTimeout != 0 {
		n += 1 + sovApi(uint64(m.ConsumersTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchConsumerGroupAssignmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ConsumerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovApi(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchConsumerGroupAssignmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovApi(uint64(m.Epoch))
	}
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Broker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovApi(uint64(m.Port))
	}
	if m.PartitionCount != 0 {
		n += 1 + sovApi(uint64(m.PartitionCount))
	}
	if m.LeaderCount != 0 {
		n += 1 + sovApi(uint64(m.LeaderCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovApi(uint64(m.Error))
	}
	if len(m.Partitions) > 0 {
		for k, v := range m.Partitions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.CreationTimestamp != 0 {
		n += 1 + sovApi(uint64(m.CreationTimestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumerGroupMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovApi(uint64(m.Error))
	}
	l = len(m.Coordinator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovApi(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionEventTimestamps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstTimestamp != 0 {
		n += 1 + sovApi(uint64(m.FirstTimestamp))
	}
	if m.LatestTimestamp != 0 {
		n += 1 + sovApi(uint64(m.LatestTimestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, s := range m.Replicas {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Isr) > 0 {
		for _, s := range m.Isr {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HighWatermark != 0 {
		n += 1 + sovApi(uint64(m.HighWatermark))
	}
	if m.NewestOffset != 0 {
		n += 1 + sovApi(uint64(m.NewestOffset))
	}
	if m.Paused {
		n += 2
	}
	if m.Readonly {
		n += 2
	}
	if m.MessagesReceivedTimestamps != nil {
		l = m.MessagesReceivedTimestamps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PauseTimestamps != nil {
		l = m.PauseTimestamps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReadonlyTimestamps != nil {
		l = m.ReadonlyTimestamps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ReplySubject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovApi(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.AckInbox)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AckPolicy != 0 {
		n += 1 + sovApi(uint64(m.AckPolicy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PartitionSubject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MsgSubject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	l = len(m.AckInbox)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AckPolicy != 0 {
		n += 1 + sovApi(uint64(m.AckPolicy))
	}
	if m.ReceptionTimestamp != 0 {
		n += 1 + sovApi(uint64(m.ReceptionTimestamp))
	}
	if m.CommitTimestamp != 0 {
		n += 1 + sovApi(uint64(m.CommitTimestamp))
	}
	if m.AckError != 0 {
		n += 1 + sovApi(uint64(m.AckError))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStreamOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStreamOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PauseStreamOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.ResumeAll {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResumeStreamOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStreamReadonlyOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stream)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partitions) > 0 {
		l = 0
		for _, e := range m.Partitions {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Readonly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityStreamEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Op != 0 {
		n += 1 + sovApi(uint64(m.Op))
	}
	if m.CreateStreamOp != nil {
		l = m.CreateStreamOp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeleteStreamOp != nil {
		l = m.DeleteStreamOp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PauseStreamOp != nil {
		l = m.PauseStreamOp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ResumeStreamOp != nil {
		l = m.ResumeStreamOp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SetStreamReadonlyOp != nil {
		l = m.SetStreamReadonlyOp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NullableInt64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullableInt64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullableInt64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullableInt32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullableInt32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullableInt32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullableBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullableBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullableBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			m.Partitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partitions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionMaxBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionMaxBytes == nil {
				m.RetentionMaxBytes = &NullableInt64{}
			}
			if err := m.RetentionMaxBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionMaxMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionMaxMessages == nil {
				m.RetentionMaxMessages = &NullableInt64{}
			}
			if err := m.RetentionMaxMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionMaxAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionMaxAge == nil {
				m.RetentionMaxAge = &NullableInt64{}
			}
			if err := m.RetentionMaxAge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanerInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CleanerInterval == nil {
				m.CleanerInterval = &NullableInt64{}
			}
			if err := m.CleanerInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentMaxBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentMaxBytes == nil {
				m.SegmentMaxBytes = &NullableInt64{}
			}
			if err := m.SegmentMaxBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentMaxAge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentMaxAge == nil {
				m.SegmentMaxAge = &NullableInt64{}
			}
			if err := m.SegmentMaxAge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactMaxGoroutines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompactMaxGoroutines == nil {
				m.CompactMaxGoroutines = &NullableInt32{}
			}
			if err := m.CompactMaxGoroutines.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompactEnabled == nil {
				m.CompactEnabled = &NullableBool{}
			}
			if err := m.CompactEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPauseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoPauseTime == nil {
				m.AutoPauseTime = &NullableInt64{}
			}
			if err := m.AutoPauseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPauseDisableIfSubscribers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoPauseDisableIfSubscribers == nil {
				m.AutoPauseDisableIfSubscribers = &NullableBool{}
			}
			if err := m.AutoPauseDisableIfSubscribers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIsr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinIsr == nil {
				m.MinIsr = &NullableInt32{}
			}
			if err := m.MinIsr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimisticConcurrencyControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptimisticConcurrencyControl == nil {
				m.OptimisticConcurrencyControl = &NullableBool{}
			}
			if err := m.OptimisticConcurrencyControl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encryption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encryption == nil {
				m.Encryption = &NullableBool{}
			}
			if err := m.Encryption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResumeAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStreamReadonlyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStreamReadonlyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStreamReadonlyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStreamReadonlyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStreamReadonlyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStreamReadonlyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupEpoch", wireType)
			}
			m.GroupEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= StartPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartOffset", wireType)
			}
			m.StartOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadISRReplica", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadISRReplica = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resume", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resume = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopPosition", wireType)
			}
			m.StopPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopPosition |= StopPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOffset", wireType)
			}
			m.StopOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTimestamp", wireType)
			}
			m.StopTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consumer == nil {
				m.Consumer = &Consumer{}
			}
			if err := m.Consumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brokers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brokers = append(m.Brokers, &Broker{})
			if err := m.Brokers[len(m.Brokers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamMetadata = append(m.StreamMetadata, &StreamMetadata{})
			if err := m.StreamMetadata[len(m.StreamMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMetadata = append(m.GroupMetadata, &ConsumerGroupMetadata{})
			if err := m.GroupMetadata[len(m.GroupMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchPartitionMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchPartitionMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchPartitionMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchPartitionMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchPartitionMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchPartitionMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &PartitionMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthApi
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckInbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckInbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPolicy", wireType)
			}
			m.AckPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckPolicy |= AckPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedOffset", wireType)
			}
			m.ExpectedOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishAsyncError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishAsyncError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishAsyncError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= PublishAsyncError_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsyncError == nil {
				m.AsyncError = &PublishAsyncError{}
			}
			if err := m.AsyncError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishToSubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishToSubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishToSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthApi
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckInbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckInbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPolicy", wireType)
			}
			m.AckPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckPolicy |= AckPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishToSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishToSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishToSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCursorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCursorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCursorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCursorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCursorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCursorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCursorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCursorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCursorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchCursorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchCursorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchCursorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinConsumerGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinConsumerGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinConsumerGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinConsumerGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinConsumerGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinConsumerGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coordinator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumersTimeout", wireType)
			}
			m.ConsumersTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumersTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConsumerGroupAssignmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConsumerGroupAssignmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConsumerGroupAssignmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchConsumerGroupAssignmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchConsumerGroupAssignmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchConsumerGroupAssignmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &PartitionAssignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Broker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Broker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Broker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionCount", wireType)
			}
			m.PartitionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderCount", wireType)
			}
			m.LeaderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= StreamMetadata_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partitions == nil {
				m.Partitions = make(map[int32]*PartitionMetadata)
			}
			var mapkey int32
			var mapvalue *PartitionMetadata
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PartitionMetadata{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Partitions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			m.CreationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerGroupMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerGroupMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerGroupMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= ConsumerGroupMetadata_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coordinator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionEventTimestamps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionEventTimestamps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionEventTimestamps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTimestamp", wireType)
			}
			m.FirstTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestTimestamp", wireType)
			}
			m.LatestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isr = append(m.Isr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighWatermark", wireType)
			}
			m.HighWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighWatermark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestOffset", wireType)
			}
			m.NewestOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewestOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesReceivedTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessagesReceivedTimestamps == nil {
				m.MessagesReceivedTimestamps = &PartitionEventTimestamps{}
			}
			if err := m.MessagesReceivedTimestamps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PauseTimestamps == nil {
				m.PauseTimestamps = &PartitionEventTimestamps{}
			}
			if err := m.PauseTimestamps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadonlyTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadonlyTimestamps == nil {
				m.ReadonlyTimestamps = &PartitionEventTimestamps{}
			}
			if err := m.ReadonlyTimestamps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplySubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplySubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthApi
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckInbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckInbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPolicy", wireType)
			}
			m.AckPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckPolicy |= AckPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckInbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckInbox = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckPolicy", wireType)
			}
			m.AckPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckPolicy |= AckPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceptionTimestamp", wireType)
			}
			m.ReceptionTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceptionTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimestamp", wireType)
			}
			m.CommitTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckError", wireType)
			}
			m.AckError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckError |= Ack_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStreamOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStreamOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStreamOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStreamOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStreamOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStreamOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseStreamOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseStreamOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseStreamOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResumeAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeStreamOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeStreamOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeStreamOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStreamReadonlyOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStreamReadonlyOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStreamReadonlyOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partitions = append(m.Partitions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partitions) == 0 {
					m.Partitions = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partitions = append(m.Partitions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityStreamEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityStreamEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityStreamEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ActivityStreamOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateStreamOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateStreamOp == nil {
				m.CreateStreamOp = &CreateStreamOp{}
			}
			if err := m.CreateStreamOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteStreamOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteStreamOp == nil {
				m.DeleteStreamOp = &DeleteStreamOp{}
			}
			if err := m.DeleteStreamOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseStreamOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PauseStreamOp == nil {
				m.PauseStreamOp = &PauseStreamOp{}
			}
			if err := m.PauseStreamOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeStreamOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResumeStreamOp == nil {
				m.ResumeStreamOp = &ResumeStreamOp{}
			}
			if err := m.ResumeStreamOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetStreamReadonlyOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetStreamReadonlyOp == nil {
				m.SetStreamReadonlyOp = &SetStreamReadonlyOp{}
			}
			if err := m.SetStreamReadonlyOp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
